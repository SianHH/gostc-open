// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/model"
)

func newSystemUserCheckin(db *gorm.DB, opts ...gen.DOOption) systemUserCheckin {
	_systemUserCheckin := systemUserCheckin{}

	_systemUserCheckin.systemUserCheckinDo.UseDB(db, opts...)
	_systemUserCheckin.systemUserCheckinDo.UseModel(&model.SystemUserCheckin{})

	tableName := _systemUserCheckin.systemUserCheckinDo.TableName()
	_systemUserCheckin.ALL = field.NewAsterisk(tableName)
	_systemUserCheckin.Id = field.NewInt(tableName, "id")
	_systemUserCheckin.Code = field.NewString(tableName, "code")
	_systemUserCheckin.AllowEdit = field.NewInt(tableName, "allow_edit")
	_systemUserCheckin.AllowDel = field.NewInt(tableName, "allow_del")
	_systemUserCheckin.Version = field.NewInt64(tableName, "version")
	_systemUserCheckin.CreatedAt = field.NewTime(tableName, "created_at")
	_systemUserCheckin.UpdatedAt = field.NewTime(tableName, "updated_at")
	_systemUserCheckin.UserCode = field.NewString(tableName, "user_code")
	_systemUserCheckin.Account = field.NewString(tableName, "account")
	_systemUserCheckin.EventDate = field.NewString(tableName, "event_date")
	_systemUserCheckin.Amount = field.NewField(tableName, "amount")

	_systemUserCheckin.fillFieldMap()

	return _systemUserCheckin
}

type systemUserCheckin struct {
	systemUserCheckinDo

	ALL       field.Asterisk
	Id        field.Int
	Code      field.String
	AllowEdit field.Int
	AllowDel  field.Int
	Version   field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	UserCode  field.String
	Account   field.String
	EventDate field.String
	Amount    field.Field

	fieldMap map[string]field.Expr
}

func (s systemUserCheckin) Table(newTableName string) *systemUserCheckin {
	s.systemUserCheckinDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemUserCheckin) As(alias string) *systemUserCheckin {
	s.systemUserCheckinDo.DO = *(s.systemUserCheckinDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemUserCheckin) updateTableName(table string) *systemUserCheckin {
	s.ALL = field.NewAsterisk(table)
	s.Id = field.NewInt(table, "id")
	s.Code = field.NewString(table, "code")
	s.AllowEdit = field.NewInt(table, "allow_edit")
	s.AllowDel = field.NewInt(table, "allow_del")
	s.Version = field.NewInt64(table, "version")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.UserCode = field.NewString(table, "user_code")
	s.Account = field.NewString(table, "account")
	s.EventDate = field.NewString(table, "event_date")
	s.Amount = field.NewField(table, "amount")

	s.fillFieldMap()

	return s
}

func (s *systemUserCheckin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemUserCheckin) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.Id
	s.fieldMap["code"] = s.Code
	s.fieldMap["allow_edit"] = s.AllowEdit
	s.fieldMap["allow_del"] = s.AllowDel
	s.fieldMap["version"] = s.Version
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["user_code"] = s.UserCode
	s.fieldMap["account"] = s.Account
	s.fieldMap["event_date"] = s.EventDate
	s.fieldMap["amount"] = s.Amount
}

func (s systemUserCheckin) clone(db *gorm.DB) systemUserCheckin {
	s.systemUserCheckinDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s systemUserCheckin) replaceDB(db *gorm.DB) systemUserCheckin {
	s.systemUserCheckinDo.ReplaceDB(db)
	return s
}

type systemUserCheckinDo struct{ gen.DO }

type ISystemUserCheckinDo interface {
	gen.SubQuery
	Debug() ISystemUserCheckinDo
	WithContext(ctx context.Context) ISystemUserCheckinDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISystemUserCheckinDo
	WriteDB() ISystemUserCheckinDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISystemUserCheckinDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemUserCheckinDo
	Not(conds ...gen.Condition) ISystemUserCheckinDo
	Or(conds ...gen.Condition) ISystemUserCheckinDo
	Select(conds ...field.Expr) ISystemUserCheckinDo
	Where(conds ...gen.Condition) ISystemUserCheckinDo
	Order(conds ...field.Expr) ISystemUserCheckinDo
	Distinct(cols ...field.Expr) ISystemUserCheckinDo
	Omit(cols ...field.Expr) ISystemUserCheckinDo
	Join(table schema.Tabler, on ...field.Expr) ISystemUserCheckinDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemUserCheckinDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemUserCheckinDo
	Group(cols ...field.Expr) ISystemUserCheckinDo
	Having(conds ...gen.Condition) ISystemUserCheckinDo
	Limit(limit int) ISystemUserCheckinDo
	Offset(offset int) ISystemUserCheckinDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemUserCheckinDo
	Unscoped() ISystemUserCheckinDo
	Create(values ...*model.SystemUserCheckin) error
	CreateInBatches(values []*model.SystemUserCheckin, batchSize int) error
	Save(values ...*model.SystemUserCheckin) error
	First() (*model.SystemUserCheckin, error)
	Take() (*model.SystemUserCheckin, error)
	Last() (*model.SystemUserCheckin, error)
	Find() ([]*model.SystemUserCheckin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemUserCheckin, err error)
	FindInBatches(result *[]*model.SystemUserCheckin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemUserCheckin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemUserCheckinDo
	Assign(attrs ...field.AssignExpr) ISystemUserCheckinDo
	Joins(fields ...field.RelationField) ISystemUserCheckinDo
	Preload(fields ...field.RelationField) ISystemUserCheckinDo
	FirstOrInit() (*model.SystemUserCheckin, error)
	FirstOrCreate() (*model.SystemUserCheckin, error)
	FindByPage(offset int, limit int) (result []*model.SystemUserCheckin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemUserCheckinDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemUserCheckinDo) Debug() ISystemUserCheckinDo {
	return s.withDO(s.DO.Debug())
}

func (s systemUserCheckinDo) WithContext(ctx context.Context) ISystemUserCheckinDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemUserCheckinDo) ReadDB() ISystemUserCheckinDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemUserCheckinDo) WriteDB() ISystemUserCheckinDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemUserCheckinDo) Session(config *gorm.Session) ISystemUserCheckinDo {
	return s.withDO(s.DO.Session(config))
}

func (s systemUserCheckinDo) Clauses(conds ...clause.Expression) ISystemUserCheckinDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemUserCheckinDo) Returning(value interface{}, columns ...string) ISystemUserCheckinDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemUserCheckinDo) Not(conds ...gen.Condition) ISystemUserCheckinDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemUserCheckinDo) Or(conds ...gen.Condition) ISystemUserCheckinDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemUserCheckinDo) Select(conds ...field.Expr) ISystemUserCheckinDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemUserCheckinDo) Where(conds ...gen.Condition) ISystemUserCheckinDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemUserCheckinDo) Order(conds ...field.Expr) ISystemUserCheckinDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemUserCheckinDo) Distinct(cols ...field.Expr) ISystemUserCheckinDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemUserCheckinDo) Omit(cols ...field.Expr) ISystemUserCheckinDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemUserCheckinDo) Join(table schema.Tabler, on ...field.Expr) ISystemUserCheckinDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemUserCheckinDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemUserCheckinDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemUserCheckinDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemUserCheckinDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemUserCheckinDo) Group(cols ...field.Expr) ISystemUserCheckinDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemUserCheckinDo) Having(conds ...gen.Condition) ISystemUserCheckinDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemUserCheckinDo) Limit(limit int) ISystemUserCheckinDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemUserCheckinDo) Offset(offset int) ISystemUserCheckinDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemUserCheckinDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemUserCheckinDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemUserCheckinDo) Unscoped() ISystemUserCheckinDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemUserCheckinDo) Create(values ...*model.SystemUserCheckin) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemUserCheckinDo) CreateInBatches(values []*model.SystemUserCheckin, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemUserCheckinDo) Save(values ...*model.SystemUserCheckin) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemUserCheckinDo) First() (*model.SystemUserCheckin, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserCheckin), nil
	}
}

func (s systemUserCheckinDo) Take() (*model.SystemUserCheckin, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserCheckin), nil
	}
}

func (s systemUserCheckinDo) Last() (*model.SystemUserCheckin, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserCheckin), nil
	}
}

func (s systemUserCheckinDo) Find() ([]*model.SystemUserCheckin, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemUserCheckin), err
}

func (s systemUserCheckinDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemUserCheckin, err error) {
	buf := make([]*model.SystemUserCheckin, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemUserCheckinDo) FindInBatches(result *[]*model.SystemUserCheckin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemUserCheckinDo) Attrs(attrs ...field.AssignExpr) ISystemUserCheckinDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemUserCheckinDo) Assign(attrs ...field.AssignExpr) ISystemUserCheckinDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemUserCheckinDo) Joins(fields ...field.RelationField) ISystemUserCheckinDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemUserCheckinDo) Preload(fields ...field.RelationField) ISystemUserCheckinDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemUserCheckinDo) FirstOrInit() (*model.SystemUserCheckin, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserCheckin), nil
	}
}

func (s systemUserCheckinDo) FirstOrCreate() (*model.SystemUserCheckin, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserCheckin), nil
	}
}

func (s systemUserCheckinDo) FindByPage(offset int, limit int) (result []*model.SystemUserCheckin, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemUserCheckinDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemUserCheckinDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemUserCheckinDo) Delete(models ...*model.SystemUserCheckin) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemUserCheckinDo) withDO(do gen.Dao) *systemUserCheckinDo {
	s.DO = *do.(*gen.DO)
	return s
}
