// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/model"
)

func newGostClientLogger(db *gorm.DB, opts ...gen.DOOption) gostClientLogger {
	_gostClientLogger := gostClientLogger{}

	_gostClientLogger.gostClientLoggerDo.UseDB(db, opts...)
	_gostClientLogger.gostClientLoggerDo.UseModel(&model.GostClientLogger{})

	tableName := _gostClientLogger.gostClientLoggerDo.TableName()
	_gostClientLogger.ALL = field.NewAsterisk(tableName)
	_gostClientLogger.Id = field.NewInt(tableName, "id")
	_gostClientLogger.Level = field.NewString(tableName, "level")
	_gostClientLogger.ClientCode = field.NewString(tableName, "client_code")
	_gostClientLogger.Content = field.NewString(tableName, "content")
	_gostClientLogger.CreatedAt = field.NewInt64(tableName, "created_at")

	_gostClientLogger.fillFieldMap()

	return _gostClientLogger
}

type gostClientLogger struct {
	gostClientLoggerDo

	ALL        field.Asterisk
	Id         field.Int
	Level      field.String
	ClientCode field.String
	Content    field.String
	CreatedAt  field.Int64

	fieldMap map[string]field.Expr
}

func (g gostClientLogger) Table(newTableName string) *gostClientLogger {
	g.gostClientLoggerDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gostClientLogger) As(alias string) *gostClientLogger {
	g.gostClientLoggerDo.DO = *(g.gostClientLoggerDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gostClientLogger) updateTableName(table string) *gostClientLogger {
	g.ALL = field.NewAsterisk(table)
	g.Id = field.NewInt(table, "id")
	g.Level = field.NewString(table, "level")
	g.ClientCode = field.NewString(table, "client_code")
	g.Content = field.NewString(table, "content")
	g.CreatedAt = field.NewInt64(table, "created_at")

	g.fillFieldMap()

	return g
}

func (g *gostClientLogger) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gostClientLogger) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 5)
	g.fieldMap["id"] = g.Id
	g.fieldMap["level"] = g.Level
	g.fieldMap["client_code"] = g.ClientCode
	g.fieldMap["content"] = g.Content
	g.fieldMap["created_at"] = g.CreatedAt
}

func (g gostClientLogger) clone(db *gorm.DB) gostClientLogger {
	g.gostClientLoggerDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gostClientLogger) replaceDB(db *gorm.DB) gostClientLogger {
	g.gostClientLoggerDo.ReplaceDB(db)
	return g
}

type gostClientLoggerDo struct{ gen.DO }

type IGostClientLoggerDo interface {
	gen.SubQuery
	Debug() IGostClientLoggerDo
	WithContext(ctx context.Context) IGostClientLoggerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGostClientLoggerDo
	WriteDB() IGostClientLoggerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGostClientLoggerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGostClientLoggerDo
	Not(conds ...gen.Condition) IGostClientLoggerDo
	Or(conds ...gen.Condition) IGostClientLoggerDo
	Select(conds ...field.Expr) IGostClientLoggerDo
	Where(conds ...gen.Condition) IGostClientLoggerDo
	Order(conds ...field.Expr) IGostClientLoggerDo
	Distinct(cols ...field.Expr) IGostClientLoggerDo
	Omit(cols ...field.Expr) IGostClientLoggerDo
	Join(table schema.Tabler, on ...field.Expr) IGostClientLoggerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGostClientLoggerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGostClientLoggerDo
	Group(cols ...field.Expr) IGostClientLoggerDo
	Having(conds ...gen.Condition) IGostClientLoggerDo
	Limit(limit int) IGostClientLoggerDo
	Offset(offset int) IGostClientLoggerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGostClientLoggerDo
	Unscoped() IGostClientLoggerDo
	Create(values ...*model.GostClientLogger) error
	CreateInBatches(values []*model.GostClientLogger, batchSize int) error
	Save(values ...*model.GostClientLogger) error
	First() (*model.GostClientLogger, error)
	Take() (*model.GostClientLogger, error)
	Last() (*model.GostClientLogger, error)
	Find() ([]*model.GostClientLogger, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostClientLogger, err error)
	FindInBatches(result *[]*model.GostClientLogger, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GostClientLogger) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGostClientLoggerDo
	Assign(attrs ...field.AssignExpr) IGostClientLoggerDo
	Joins(fields ...field.RelationField) IGostClientLoggerDo
	Preload(fields ...field.RelationField) IGostClientLoggerDo
	FirstOrInit() (*model.GostClientLogger, error)
	FirstOrCreate() (*model.GostClientLogger, error)
	FindByPage(offset int, limit int) (result []*model.GostClientLogger, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGostClientLoggerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gostClientLoggerDo) Debug() IGostClientLoggerDo {
	return g.withDO(g.DO.Debug())
}

func (g gostClientLoggerDo) WithContext(ctx context.Context) IGostClientLoggerDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gostClientLoggerDo) ReadDB() IGostClientLoggerDo {
	return g.Clauses(dbresolver.Read)
}

func (g gostClientLoggerDo) WriteDB() IGostClientLoggerDo {
	return g.Clauses(dbresolver.Write)
}

func (g gostClientLoggerDo) Session(config *gorm.Session) IGostClientLoggerDo {
	return g.withDO(g.DO.Session(config))
}

func (g gostClientLoggerDo) Clauses(conds ...clause.Expression) IGostClientLoggerDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gostClientLoggerDo) Returning(value interface{}, columns ...string) IGostClientLoggerDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gostClientLoggerDo) Not(conds ...gen.Condition) IGostClientLoggerDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gostClientLoggerDo) Or(conds ...gen.Condition) IGostClientLoggerDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gostClientLoggerDo) Select(conds ...field.Expr) IGostClientLoggerDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gostClientLoggerDo) Where(conds ...gen.Condition) IGostClientLoggerDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gostClientLoggerDo) Order(conds ...field.Expr) IGostClientLoggerDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gostClientLoggerDo) Distinct(cols ...field.Expr) IGostClientLoggerDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gostClientLoggerDo) Omit(cols ...field.Expr) IGostClientLoggerDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gostClientLoggerDo) Join(table schema.Tabler, on ...field.Expr) IGostClientLoggerDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gostClientLoggerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGostClientLoggerDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gostClientLoggerDo) RightJoin(table schema.Tabler, on ...field.Expr) IGostClientLoggerDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gostClientLoggerDo) Group(cols ...field.Expr) IGostClientLoggerDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gostClientLoggerDo) Having(conds ...gen.Condition) IGostClientLoggerDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gostClientLoggerDo) Limit(limit int) IGostClientLoggerDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gostClientLoggerDo) Offset(offset int) IGostClientLoggerDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gostClientLoggerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGostClientLoggerDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gostClientLoggerDo) Unscoped() IGostClientLoggerDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gostClientLoggerDo) Create(values ...*model.GostClientLogger) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gostClientLoggerDo) CreateInBatches(values []*model.GostClientLogger, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gostClientLoggerDo) Save(values ...*model.GostClientLogger) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gostClientLoggerDo) First() (*model.GostClientLogger, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientLogger), nil
	}
}

func (g gostClientLoggerDo) Take() (*model.GostClientLogger, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientLogger), nil
	}
}

func (g gostClientLoggerDo) Last() (*model.GostClientLogger, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientLogger), nil
	}
}

func (g gostClientLoggerDo) Find() ([]*model.GostClientLogger, error) {
	result, err := g.DO.Find()
	return result.([]*model.GostClientLogger), err
}

func (g gostClientLoggerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostClientLogger, err error) {
	buf := make([]*model.GostClientLogger, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gostClientLoggerDo) FindInBatches(result *[]*model.GostClientLogger, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gostClientLoggerDo) Attrs(attrs ...field.AssignExpr) IGostClientLoggerDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gostClientLoggerDo) Assign(attrs ...field.AssignExpr) IGostClientLoggerDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gostClientLoggerDo) Joins(fields ...field.RelationField) IGostClientLoggerDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gostClientLoggerDo) Preload(fields ...field.RelationField) IGostClientLoggerDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gostClientLoggerDo) FirstOrInit() (*model.GostClientLogger, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientLogger), nil
	}
}

func (g gostClientLoggerDo) FirstOrCreate() (*model.GostClientLogger, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientLogger), nil
	}
}

func (g gostClientLoggerDo) FindByPage(offset int, limit int) (result []*model.GostClientLogger, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gostClientLoggerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gostClientLoggerDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gostClientLoggerDo) Delete(models ...*model.GostClientLogger) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gostClientLoggerDo) withDO(do gen.Dao) *gostClientLoggerDo {
	g.DO = *do.(*gen.DO)
	return g
}
