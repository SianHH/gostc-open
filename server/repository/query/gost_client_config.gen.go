// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/model"
)

func newGostClientConfig(db *gorm.DB, opts ...gen.DOOption) gostClientConfig {
	_gostClientConfig := gostClientConfig{}

	_gostClientConfig.gostClientConfigDo.UseDB(db, opts...)
	_gostClientConfig.gostClientConfigDo.UseModel(&model.GostClientConfig{})

	tableName := _gostClientConfig.gostClientConfigDo.TableName()
	_gostClientConfig.ALL = field.NewAsterisk(tableName)
	_gostClientConfig.ChargingType = field.NewInt(tableName, "charging_type")
	_gostClientConfig.Cycle = field.NewInt(tableName, "cycle")
	_gostClientConfig.Amount = field.NewField(tableName, "amount")
	_gostClientConfig.Limiter = field.NewInt(tableName, "limiter")
	_gostClientConfig.RLimiter = field.NewInt(tableName, "r_limiter")
	_gostClientConfig.CLimiter = field.NewInt(tableName, "c_limiter")
	_gostClientConfig.ExpAt = field.NewInt64(tableName, "exp_at")

	_gostClientConfig.fillFieldMap()

	return _gostClientConfig
}

type gostClientConfig struct {
	gostClientConfigDo

	ALL          field.Asterisk
	ChargingType field.Int
	Cycle        field.Int
	Amount       field.Field
	Limiter      field.Int
	RLimiter     field.Int
	CLimiter     field.Int
	ExpAt        field.Int64

	fieldMap map[string]field.Expr
}

func (g gostClientConfig) Table(newTableName string) *gostClientConfig {
	g.gostClientConfigDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gostClientConfig) As(alias string) *gostClientConfig {
	g.gostClientConfigDo.DO = *(g.gostClientConfigDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gostClientConfig) updateTableName(table string) *gostClientConfig {
	g.ALL = field.NewAsterisk(table)
	g.ChargingType = field.NewInt(table, "charging_type")
	g.Cycle = field.NewInt(table, "cycle")
	g.Amount = field.NewField(table, "amount")
	g.Limiter = field.NewInt(table, "limiter")
	g.RLimiter = field.NewInt(table, "r_limiter")
	g.CLimiter = field.NewInt(table, "c_limiter")
	g.ExpAt = field.NewInt64(table, "exp_at")

	g.fillFieldMap()

	return g
}

func (g *gostClientConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gostClientConfig) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 7)
	g.fieldMap["charging_type"] = g.ChargingType
	g.fieldMap["cycle"] = g.Cycle
	g.fieldMap["amount"] = g.Amount
	g.fieldMap["limiter"] = g.Limiter
	g.fieldMap["r_limiter"] = g.RLimiter
	g.fieldMap["c_limiter"] = g.CLimiter
	g.fieldMap["exp_at"] = g.ExpAt
}

func (g gostClientConfig) clone(db *gorm.DB) gostClientConfig {
	g.gostClientConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gostClientConfig) replaceDB(db *gorm.DB) gostClientConfig {
	g.gostClientConfigDo.ReplaceDB(db)
	return g
}

type gostClientConfigDo struct{ gen.DO }

type IGostClientConfigDo interface {
	gen.SubQuery
	Debug() IGostClientConfigDo
	WithContext(ctx context.Context) IGostClientConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGostClientConfigDo
	WriteDB() IGostClientConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGostClientConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGostClientConfigDo
	Not(conds ...gen.Condition) IGostClientConfigDo
	Or(conds ...gen.Condition) IGostClientConfigDo
	Select(conds ...field.Expr) IGostClientConfigDo
	Where(conds ...gen.Condition) IGostClientConfigDo
	Order(conds ...field.Expr) IGostClientConfigDo
	Distinct(cols ...field.Expr) IGostClientConfigDo
	Omit(cols ...field.Expr) IGostClientConfigDo
	Join(table schema.Tabler, on ...field.Expr) IGostClientConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGostClientConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGostClientConfigDo
	Group(cols ...field.Expr) IGostClientConfigDo
	Having(conds ...gen.Condition) IGostClientConfigDo
	Limit(limit int) IGostClientConfigDo
	Offset(offset int) IGostClientConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGostClientConfigDo
	Unscoped() IGostClientConfigDo
	Create(values ...*model.GostClientConfig) error
	CreateInBatches(values []*model.GostClientConfig, batchSize int) error
	Save(values ...*model.GostClientConfig) error
	First() (*model.GostClientConfig, error)
	Take() (*model.GostClientConfig, error)
	Last() (*model.GostClientConfig, error)
	Find() ([]*model.GostClientConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostClientConfig, err error)
	FindInBatches(result *[]*model.GostClientConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GostClientConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGostClientConfigDo
	Assign(attrs ...field.AssignExpr) IGostClientConfigDo
	Joins(fields ...field.RelationField) IGostClientConfigDo
	Preload(fields ...field.RelationField) IGostClientConfigDo
	FirstOrInit() (*model.GostClientConfig, error)
	FirstOrCreate() (*model.GostClientConfig, error)
	FindByPage(offset int, limit int) (result []*model.GostClientConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGostClientConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gostClientConfigDo) Debug() IGostClientConfigDo {
	return g.withDO(g.DO.Debug())
}

func (g gostClientConfigDo) WithContext(ctx context.Context) IGostClientConfigDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gostClientConfigDo) ReadDB() IGostClientConfigDo {
	return g.Clauses(dbresolver.Read)
}

func (g gostClientConfigDo) WriteDB() IGostClientConfigDo {
	return g.Clauses(dbresolver.Write)
}

func (g gostClientConfigDo) Session(config *gorm.Session) IGostClientConfigDo {
	return g.withDO(g.DO.Session(config))
}

func (g gostClientConfigDo) Clauses(conds ...clause.Expression) IGostClientConfigDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gostClientConfigDo) Returning(value interface{}, columns ...string) IGostClientConfigDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gostClientConfigDo) Not(conds ...gen.Condition) IGostClientConfigDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gostClientConfigDo) Or(conds ...gen.Condition) IGostClientConfigDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gostClientConfigDo) Select(conds ...field.Expr) IGostClientConfigDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gostClientConfigDo) Where(conds ...gen.Condition) IGostClientConfigDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gostClientConfigDo) Order(conds ...field.Expr) IGostClientConfigDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gostClientConfigDo) Distinct(cols ...field.Expr) IGostClientConfigDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gostClientConfigDo) Omit(cols ...field.Expr) IGostClientConfigDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gostClientConfigDo) Join(table schema.Tabler, on ...field.Expr) IGostClientConfigDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gostClientConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGostClientConfigDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gostClientConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IGostClientConfigDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gostClientConfigDo) Group(cols ...field.Expr) IGostClientConfigDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gostClientConfigDo) Having(conds ...gen.Condition) IGostClientConfigDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gostClientConfigDo) Limit(limit int) IGostClientConfigDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gostClientConfigDo) Offset(offset int) IGostClientConfigDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gostClientConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGostClientConfigDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gostClientConfigDo) Unscoped() IGostClientConfigDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gostClientConfigDo) Create(values ...*model.GostClientConfig) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gostClientConfigDo) CreateInBatches(values []*model.GostClientConfig, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gostClientConfigDo) Save(values ...*model.GostClientConfig) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gostClientConfigDo) First() (*model.GostClientConfig, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientConfig), nil
	}
}

func (g gostClientConfigDo) Take() (*model.GostClientConfig, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientConfig), nil
	}
}

func (g gostClientConfigDo) Last() (*model.GostClientConfig, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientConfig), nil
	}
}

func (g gostClientConfigDo) Find() ([]*model.GostClientConfig, error) {
	result, err := g.DO.Find()
	return result.([]*model.GostClientConfig), err
}

func (g gostClientConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostClientConfig, err error) {
	buf := make([]*model.GostClientConfig, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gostClientConfigDo) FindInBatches(result *[]*model.GostClientConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gostClientConfigDo) Attrs(attrs ...field.AssignExpr) IGostClientConfigDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gostClientConfigDo) Assign(attrs ...field.AssignExpr) IGostClientConfigDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gostClientConfigDo) Joins(fields ...field.RelationField) IGostClientConfigDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gostClientConfigDo) Preload(fields ...field.RelationField) IGostClientConfigDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gostClientConfigDo) FirstOrInit() (*model.GostClientConfig, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientConfig), nil
	}
}

func (g gostClientConfigDo) FirstOrCreate() (*model.GostClientConfig, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientConfig), nil
	}
}

func (g gostClientConfigDo) FindByPage(offset int, limit int) (result []*model.GostClientConfig, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gostClientConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gostClientConfigDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gostClientConfigDo) Delete(models ...*model.GostClientConfig) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gostClientConfigDo) withDO(do gen.Dao) *gostClientConfigDo {
	g.DO = *do.(*gen.DO)
	return g
}
