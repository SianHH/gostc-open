// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/model"
)

func newGostClientTunnel(db *gorm.DB, opts ...gen.DOOption) gostClientTunnel {
	_gostClientTunnel := gostClientTunnel{}

	_gostClientTunnel.gostClientTunnelDo.UseDB(db, opts...)
	_gostClientTunnel.gostClientTunnelDo.UseModel(&model.GostClientTunnel{})

	tableName := _gostClientTunnel.gostClientTunnelDo.TableName()
	_gostClientTunnel.ALL = field.NewAsterisk(tableName)
	_gostClientTunnel.Id = field.NewInt(tableName, "id")
	_gostClientTunnel.Code = field.NewString(tableName, "code")
	_gostClientTunnel.AllowEdit = field.NewInt(tableName, "allow_edit")
	_gostClientTunnel.AllowDel = field.NewInt(tableName, "allow_del")
	_gostClientTunnel.Version = field.NewInt64(tableName, "version")
	_gostClientTunnel.CreatedAt = field.NewTime(tableName, "created_at")
	_gostClientTunnel.UpdatedAt = field.NewTime(tableName, "updated_at")
	_gostClientTunnel.Name = field.NewString(tableName, "name")
	_gostClientTunnel.TargetIp = field.NewString(tableName, "target_ip")
	_gostClientTunnel.TargetPort = field.NewString(tableName, "target_port")
	_gostClientTunnel.VKey = field.NewString(tableName, "v_key")
	_gostClientTunnel.NoDelay = field.NewInt(tableName, "no_delay")
	_gostClientTunnel.NodeCode = field.NewString(tableName, "node_code")
	_gostClientTunnel.ClientCode = field.NewString(tableName, "client_code")
	_gostClientTunnel.UserCode = field.NewString(tableName, "user_code")
	_gostClientTunnel.Enable = field.NewInt(tableName, "enable")
	_gostClientTunnel.Status = field.NewInt(tableName, "status")
	_gostClientTunnel.ChargingType = field.NewInt(tableName, "charging_type")
	_gostClientTunnel.Cycle = field.NewInt(tableName, "cycle")
	_gostClientTunnel.Amount = field.NewField(tableName, "amount")
	_gostClientTunnel.Limiter = field.NewInt(tableName, "limiter")
	_gostClientTunnel.RLimiter = field.NewInt(tableName, "r_limiter")
	_gostClientTunnel.CLimiter = field.NewInt(tableName, "c_limiter")
	_gostClientTunnel.OnlyChina = field.NewInt(tableName, "only_china")
	_gostClientTunnel.ExpAt = field.NewInt64(tableName, "exp_at")
	_gostClientTunnel.Node = gostClientTunnelBelongsToNode{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Node", "model.GostNode"),
		Configs: struct {
			field.RelationField
			Node struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Node.Configs", "model.GostNodeConfig"),
			Node: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Node.Configs.Node", "model.GostNode"),
			},
		},
	}

	_gostClientTunnel.Client = gostClientTunnelBelongsToClient{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Client", "model.GostClient"),
		User: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Client.User", "model.SystemUser"),
		},
	}

	_gostClientTunnel.User = gostClientTunnelBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.SystemUser"),
	}

	_gostClientTunnel.fillFieldMap()

	return _gostClientTunnel
}

type gostClientTunnel struct {
	gostClientTunnelDo

	ALL          field.Asterisk
	Id           field.Int
	Code         field.String
	AllowEdit    field.Int
	AllowDel     field.Int
	Version      field.Int64
	CreatedAt    field.Time
	UpdatedAt    field.Time
	Name         field.String
	TargetIp     field.String
	TargetPort   field.String
	VKey         field.String
	NoDelay      field.Int
	NodeCode     field.String
	ClientCode   field.String
	UserCode     field.String
	Enable       field.Int
	Status       field.Int
	ChargingType field.Int
	Cycle        field.Int
	Amount       field.Field
	Limiter      field.Int
	RLimiter     field.Int
	CLimiter     field.Int
	OnlyChina    field.Int
	ExpAt        field.Int64
	Node         gostClientTunnelBelongsToNode

	Client gostClientTunnelBelongsToClient

	User gostClientTunnelBelongsToUser

	fieldMap map[string]field.Expr
}

func (g gostClientTunnel) Table(newTableName string) *gostClientTunnel {
	g.gostClientTunnelDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gostClientTunnel) As(alias string) *gostClientTunnel {
	g.gostClientTunnelDo.DO = *(g.gostClientTunnelDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gostClientTunnel) updateTableName(table string) *gostClientTunnel {
	g.ALL = field.NewAsterisk(table)
	g.Id = field.NewInt(table, "id")
	g.Code = field.NewString(table, "code")
	g.AllowEdit = field.NewInt(table, "allow_edit")
	g.AllowDel = field.NewInt(table, "allow_del")
	g.Version = field.NewInt64(table, "version")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.Name = field.NewString(table, "name")
	g.TargetIp = field.NewString(table, "target_ip")
	g.TargetPort = field.NewString(table, "target_port")
	g.VKey = field.NewString(table, "v_key")
	g.NoDelay = field.NewInt(table, "no_delay")
	g.NodeCode = field.NewString(table, "node_code")
	g.ClientCode = field.NewString(table, "client_code")
	g.UserCode = field.NewString(table, "user_code")
	g.Enable = field.NewInt(table, "enable")
	g.Status = field.NewInt(table, "status")
	g.ChargingType = field.NewInt(table, "charging_type")
	g.Cycle = field.NewInt(table, "cycle")
	g.Amount = field.NewField(table, "amount")
	g.Limiter = field.NewInt(table, "limiter")
	g.RLimiter = field.NewInt(table, "r_limiter")
	g.CLimiter = field.NewInt(table, "c_limiter")
	g.OnlyChina = field.NewInt(table, "only_china")
	g.ExpAt = field.NewInt64(table, "exp_at")

	g.fillFieldMap()

	return g
}

func (g *gostClientTunnel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gostClientTunnel) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 28)
	g.fieldMap["id"] = g.Id
	g.fieldMap["code"] = g.Code
	g.fieldMap["allow_edit"] = g.AllowEdit
	g.fieldMap["allow_del"] = g.AllowDel
	g.fieldMap["version"] = g.Version
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["name"] = g.Name
	g.fieldMap["target_ip"] = g.TargetIp
	g.fieldMap["target_port"] = g.TargetPort
	g.fieldMap["v_key"] = g.VKey
	g.fieldMap["no_delay"] = g.NoDelay
	g.fieldMap["node_code"] = g.NodeCode
	g.fieldMap["client_code"] = g.ClientCode
	g.fieldMap["user_code"] = g.UserCode
	g.fieldMap["enable"] = g.Enable
	g.fieldMap["status"] = g.Status
	g.fieldMap["charging_type"] = g.ChargingType
	g.fieldMap["cycle"] = g.Cycle
	g.fieldMap["amount"] = g.Amount
	g.fieldMap["limiter"] = g.Limiter
	g.fieldMap["r_limiter"] = g.RLimiter
	g.fieldMap["c_limiter"] = g.CLimiter
	g.fieldMap["only_china"] = g.OnlyChina
	g.fieldMap["exp_at"] = g.ExpAt

}

func (g gostClientTunnel) clone(db *gorm.DB) gostClientTunnel {
	g.gostClientTunnelDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gostClientTunnel) replaceDB(db *gorm.DB) gostClientTunnel {
	g.gostClientTunnelDo.ReplaceDB(db)
	return g
}

type gostClientTunnelBelongsToNode struct {
	db *gorm.DB

	field.RelationField

	Configs struct {
		field.RelationField
		Node struct {
			field.RelationField
		}
	}
}

func (a gostClientTunnelBelongsToNode) Where(conds ...field.Expr) *gostClientTunnelBelongsToNode {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a gostClientTunnelBelongsToNode) WithContext(ctx context.Context) *gostClientTunnelBelongsToNode {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a gostClientTunnelBelongsToNode) Session(session *gorm.Session) *gostClientTunnelBelongsToNode {
	a.db = a.db.Session(session)
	return &a
}

func (a gostClientTunnelBelongsToNode) Model(m *model.GostClientTunnel) *gostClientTunnelBelongsToNodeTx {
	return &gostClientTunnelBelongsToNodeTx{a.db.Model(m).Association(a.Name())}
}

type gostClientTunnelBelongsToNodeTx struct{ tx *gorm.Association }

func (a gostClientTunnelBelongsToNodeTx) Find() (result *model.GostNode, err error) {
	return result, a.tx.Find(&result)
}

func (a gostClientTunnelBelongsToNodeTx) Append(values ...*model.GostNode) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a gostClientTunnelBelongsToNodeTx) Replace(values ...*model.GostNode) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a gostClientTunnelBelongsToNodeTx) Delete(values ...*model.GostNode) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a gostClientTunnelBelongsToNodeTx) Clear() error {
	return a.tx.Clear()
}

func (a gostClientTunnelBelongsToNodeTx) Count() int64 {
	return a.tx.Count()
}

type gostClientTunnelBelongsToClient struct {
	db *gorm.DB

	field.RelationField

	User struct {
		field.RelationField
	}
}

func (a gostClientTunnelBelongsToClient) Where(conds ...field.Expr) *gostClientTunnelBelongsToClient {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a gostClientTunnelBelongsToClient) WithContext(ctx context.Context) *gostClientTunnelBelongsToClient {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a gostClientTunnelBelongsToClient) Session(session *gorm.Session) *gostClientTunnelBelongsToClient {
	a.db = a.db.Session(session)
	return &a
}

func (a gostClientTunnelBelongsToClient) Model(m *model.GostClientTunnel) *gostClientTunnelBelongsToClientTx {
	return &gostClientTunnelBelongsToClientTx{a.db.Model(m).Association(a.Name())}
}

type gostClientTunnelBelongsToClientTx struct{ tx *gorm.Association }

func (a gostClientTunnelBelongsToClientTx) Find() (result *model.GostClient, err error) {
	return result, a.tx.Find(&result)
}

func (a gostClientTunnelBelongsToClientTx) Append(values ...*model.GostClient) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a gostClientTunnelBelongsToClientTx) Replace(values ...*model.GostClient) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a gostClientTunnelBelongsToClientTx) Delete(values ...*model.GostClient) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a gostClientTunnelBelongsToClientTx) Clear() error {
	return a.tx.Clear()
}

func (a gostClientTunnelBelongsToClientTx) Count() int64 {
	return a.tx.Count()
}

type gostClientTunnelBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a gostClientTunnelBelongsToUser) Where(conds ...field.Expr) *gostClientTunnelBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a gostClientTunnelBelongsToUser) WithContext(ctx context.Context) *gostClientTunnelBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a gostClientTunnelBelongsToUser) Session(session *gorm.Session) *gostClientTunnelBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a gostClientTunnelBelongsToUser) Model(m *model.GostClientTunnel) *gostClientTunnelBelongsToUserTx {
	return &gostClientTunnelBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type gostClientTunnelBelongsToUserTx struct{ tx *gorm.Association }

func (a gostClientTunnelBelongsToUserTx) Find() (result *model.SystemUser, err error) {
	return result, a.tx.Find(&result)
}

func (a gostClientTunnelBelongsToUserTx) Append(values ...*model.SystemUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a gostClientTunnelBelongsToUserTx) Replace(values ...*model.SystemUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a gostClientTunnelBelongsToUserTx) Delete(values ...*model.SystemUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a gostClientTunnelBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a gostClientTunnelBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type gostClientTunnelDo struct{ gen.DO }

type IGostClientTunnelDo interface {
	gen.SubQuery
	Debug() IGostClientTunnelDo
	WithContext(ctx context.Context) IGostClientTunnelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGostClientTunnelDo
	WriteDB() IGostClientTunnelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGostClientTunnelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGostClientTunnelDo
	Not(conds ...gen.Condition) IGostClientTunnelDo
	Or(conds ...gen.Condition) IGostClientTunnelDo
	Select(conds ...field.Expr) IGostClientTunnelDo
	Where(conds ...gen.Condition) IGostClientTunnelDo
	Order(conds ...field.Expr) IGostClientTunnelDo
	Distinct(cols ...field.Expr) IGostClientTunnelDo
	Omit(cols ...field.Expr) IGostClientTunnelDo
	Join(table schema.Tabler, on ...field.Expr) IGostClientTunnelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGostClientTunnelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGostClientTunnelDo
	Group(cols ...field.Expr) IGostClientTunnelDo
	Having(conds ...gen.Condition) IGostClientTunnelDo
	Limit(limit int) IGostClientTunnelDo
	Offset(offset int) IGostClientTunnelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGostClientTunnelDo
	Unscoped() IGostClientTunnelDo
	Create(values ...*model.GostClientTunnel) error
	CreateInBatches(values []*model.GostClientTunnel, batchSize int) error
	Save(values ...*model.GostClientTunnel) error
	First() (*model.GostClientTunnel, error)
	Take() (*model.GostClientTunnel, error)
	Last() (*model.GostClientTunnel, error)
	Find() ([]*model.GostClientTunnel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostClientTunnel, err error)
	FindInBatches(result *[]*model.GostClientTunnel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GostClientTunnel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGostClientTunnelDo
	Assign(attrs ...field.AssignExpr) IGostClientTunnelDo
	Joins(fields ...field.RelationField) IGostClientTunnelDo
	Preload(fields ...field.RelationField) IGostClientTunnelDo
	FirstOrInit() (*model.GostClientTunnel, error)
	FirstOrCreate() (*model.GostClientTunnel, error)
	FindByPage(offset int, limit int) (result []*model.GostClientTunnel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGostClientTunnelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gostClientTunnelDo) Debug() IGostClientTunnelDo {
	return g.withDO(g.DO.Debug())
}

func (g gostClientTunnelDo) WithContext(ctx context.Context) IGostClientTunnelDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gostClientTunnelDo) ReadDB() IGostClientTunnelDo {
	return g.Clauses(dbresolver.Read)
}

func (g gostClientTunnelDo) WriteDB() IGostClientTunnelDo {
	return g.Clauses(dbresolver.Write)
}

func (g gostClientTunnelDo) Session(config *gorm.Session) IGostClientTunnelDo {
	return g.withDO(g.DO.Session(config))
}

func (g gostClientTunnelDo) Clauses(conds ...clause.Expression) IGostClientTunnelDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gostClientTunnelDo) Returning(value interface{}, columns ...string) IGostClientTunnelDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gostClientTunnelDo) Not(conds ...gen.Condition) IGostClientTunnelDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gostClientTunnelDo) Or(conds ...gen.Condition) IGostClientTunnelDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gostClientTunnelDo) Select(conds ...field.Expr) IGostClientTunnelDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gostClientTunnelDo) Where(conds ...gen.Condition) IGostClientTunnelDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gostClientTunnelDo) Order(conds ...field.Expr) IGostClientTunnelDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gostClientTunnelDo) Distinct(cols ...field.Expr) IGostClientTunnelDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gostClientTunnelDo) Omit(cols ...field.Expr) IGostClientTunnelDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gostClientTunnelDo) Join(table schema.Tabler, on ...field.Expr) IGostClientTunnelDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gostClientTunnelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGostClientTunnelDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gostClientTunnelDo) RightJoin(table schema.Tabler, on ...field.Expr) IGostClientTunnelDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gostClientTunnelDo) Group(cols ...field.Expr) IGostClientTunnelDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gostClientTunnelDo) Having(conds ...gen.Condition) IGostClientTunnelDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gostClientTunnelDo) Limit(limit int) IGostClientTunnelDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gostClientTunnelDo) Offset(offset int) IGostClientTunnelDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gostClientTunnelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGostClientTunnelDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gostClientTunnelDo) Unscoped() IGostClientTunnelDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gostClientTunnelDo) Create(values ...*model.GostClientTunnel) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gostClientTunnelDo) CreateInBatches(values []*model.GostClientTunnel, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gostClientTunnelDo) Save(values ...*model.GostClientTunnel) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gostClientTunnelDo) First() (*model.GostClientTunnel, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientTunnel), nil
	}
}

func (g gostClientTunnelDo) Take() (*model.GostClientTunnel, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientTunnel), nil
	}
}

func (g gostClientTunnelDo) Last() (*model.GostClientTunnel, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientTunnel), nil
	}
}

func (g gostClientTunnelDo) Find() ([]*model.GostClientTunnel, error) {
	result, err := g.DO.Find()
	return result.([]*model.GostClientTunnel), err
}

func (g gostClientTunnelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostClientTunnel, err error) {
	buf := make([]*model.GostClientTunnel, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gostClientTunnelDo) FindInBatches(result *[]*model.GostClientTunnel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gostClientTunnelDo) Attrs(attrs ...field.AssignExpr) IGostClientTunnelDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gostClientTunnelDo) Assign(attrs ...field.AssignExpr) IGostClientTunnelDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gostClientTunnelDo) Joins(fields ...field.RelationField) IGostClientTunnelDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gostClientTunnelDo) Preload(fields ...field.RelationField) IGostClientTunnelDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gostClientTunnelDo) FirstOrInit() (*model.GostClientTunnel, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientTunnel), nil
	}
}

func (g gostClientTunnelDo) FirstOrCreate() (*model.GostClientTunnel, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientTunnel), nil
	}
}

func (g gostClientTunnelDo) FindByPage(offset int, limit int) (result []*model.GostClientTunnel, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gostClientTunnelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gostClientTunnelDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gostClientTunnelDo) Delete(models ...*model.GostClientTunnel) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gostClientTunnelDo) withDO(do gen.Dao) *gostClientTunnelDo {
	g.DO = *do.(*gen.DO)
	return g
}
