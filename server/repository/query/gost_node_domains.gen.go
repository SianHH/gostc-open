// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/model"
)

func newGostNodeDomain(db *gorm.DB, opts ...gen.DOOption) gostNodeDomain {
	_gostNodeDomain := gostNodeDomain{}

	_gostNodeDomain.gostNodeDomainDo.UseDB(db, opts...)
	_gostNodeDomain.gostNodeDomainDo.UseModel(&model.GostNodeDomain{})

	tableName := _gostNodeDomain.gostNodeDomainDo.TableName()
	_gostNodeDomain.ALL = field.NewAsterisk(tableName)
	_gostNodeDomain.Id = field.NewInt(tableName, "id")
	_gostNodeDomain.Code = field.NewString(tableName, "code")
	_gostNodeDomain.AllowEdit = field.NewInt(tableName, "allow_edit")
	_gostNodeDomain.AllowDel = field.NewInt(tableName, "allow_del")
	_gostNodeDomain.Version = field.NewInt64(tableName, "version")
	_gostNodeDomain.CreatedAt = field.NewTime(tableName, "created_at")
	_gostNodeDomain.UpdatedAt = field.NewTime(tableName, "updated_at")
	_gostNodeDomain.Prefix = field.NewString(tableName, "prefix")
	_gostNodeDomain.NodeCode = field.NewString(tableName, "node_code")

	_gostNodeDomain.fillFieldMap()

	return _gostNodeDomain
}

type gostNodeDomain struct {
	gostNodeDomainDo

	ALL       field.Asterisk
	Id        field.Int
	Code      field.String
	AllowEdit field.Int
	AllowDel  field.Int
	Version   field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	Prefix    field.String
	NodeCode  field.String

	fieldMap map[string]field.Expr
}

func (g gostNodeDomain) Table(newTableName string) *gostNodeDomain {
	g.gostNodeDomainDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gostNodeDomain) As(alias string) *gostNodeDomain {
	g.gostNodeDomainDo.DO = *(g.gostNodeDomainDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gostNodeDomain) updateTableName(table string) *gostNodeDomain {
	g.ALL = field.NewAsterisk(table)
	g.Id = field.NewInt(table, "id")
	g.Code = field.NewString(table, "code")
	g.AllowEdit = field.NewInt(table, "allow_edit")
	g.AllowDel = field.NewInt(table, "allow_del")
	g.Version = field.NewInt64(table, "version")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.Prefix = field.NewString(table, "prefix")
	g.NodeCode = field.NewString(table, "node_code")

	g.fillFieldMap()

	return g
}

func (g *gostNodeDomain) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gostNodeDomain) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 9)
	g.fieldMap["id"] = g.Id
	g.fieldMap["code"] = g.Code
	g.fieldMap["allow_edit"] = g.AllowEdit
	g.fieldMap["allow_del"] = g.AllowDel
	g.fieldMap["version"] = g.Version
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["prefix"] = g.Prefix
	g.fieldMap["node_code"] = g.NodeCode
}

func (g gostNodeDomain) clone(db *gorm.DB) gostNodeDomain {
	g.gostNodeDomainDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gostNodeDomain) replaceDB(db *gorm.DB) gostNodeDomain {
	g.gostNodeDomainDo.ReplaceDB(db)
	return g
}

type gostNodeDomainDo struct{ gen.DO }

type IGostNodeDomainDo interface {
	gen.SubQuery
	Debug() IGostNodeDomainDo
	WithContext(ctx context.Context) IGostNodeDomainDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGostNodeDomainDo
	WriteDB() IGostNodeDomainDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGostNodeDomainDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGostNodeDomainDo
	Not(conds ...gen.Condition) IGostNodeDomainDo
	Or(conds ...gen.Condition) IGostNodeDomainDo
	Select(conds ...field.Expr) IGostNodeDomainDo
	Where(conds ...gen.Condition) IGostNodeDomainDo
	Order(conds ...field.Expr) IGostNodeDomainDo
	Distinct(cols ...field.Expr) IGostNodeDomainDo
	Omit(cols ...field.Expr) IGostNodeDomainDo
	Join(table schema.Tabler, on ...field.Expr) IGostNodeDomainDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGostNodeDomainDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGostNodeDomainDo
	Group(cols ...field.Expr) IGostNodeDomainDo
	Having(conds ...gen.Condition) IGostNodeDomainDo
	Limit(limit int) IGostNodeDomainDo
	Offset(offset int) IGostNodeDomainDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGostNodeDomainDo
	Unscoped() IGostNodeDomainDo
	Create(values ...*model.GostNodeDomain) error
	CreateInBatches(values []*model.GostNodeDomain, batchSize int) error
	Save(values ...*model.GostNodeDomain) error
	First() (*model.GostNodeDomain, error)
	Take() (*model.GostNodeDomain, error)
	Last() (*model.GostNodeDomain, error)
	Find() ([]*model.GostNodeDomain, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostNodeDomain, err error)
	FindInBatches(result *[]*model.GostNodeDomain, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GostNodeDomain) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGostNodeDomainDo
	Assign(attrs ...field.AssignExpr) IGostNodeDomainDo
	Joins(fields ...field.RelationField) IGostNodeDomainDo
	Preload(fields ...field.RelationField) IGostNodeDomainDo
	FirstOrInit() (*model.GostNodeDomain, error)
	FirstOrCreate() (*model.GostNodeDomain, error)
	FindByPage(offset int, limit int) (result []*model.GostNodeDomain, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGostNodeDomainDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gostNodeDomainDo) Debug() IGostNodeDomainDo {
	return g.withDO(g.DO.Debug())
}

func (g gostNodeDomainDo) WithContext(ctx context.Context) IGostNodeDomainDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gostNodeDomainDo) ReadDB() IGostNodeDomainDo {
	return g.Clauses(dbresolver.Read)
}

func (g gostNodeDomainDo) WriteDB() IGostNodeDomainDo {
	return g.Clauses(dbresolver.Write)
}

func (g gostNodeDomainDo) Session(config *gorm.Session) IGostNodeDomainDo {
	return g.withDO(g.DO.Session(config))
}

func (g gostNodeDomainDo) Clauses(conds ...clause.Expression) IGostNodeDomainDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gostNodeDomainDo) Returning(value interface{}, columns ...string) IGostNodeDomainDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gostNodeDomainDo) Not(conds ...gen.Condition) IGostNodeDomainDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gostNodeDomainDo) Or(conds ...gen.Condition) IGostNodeDomainDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gostNodeDomainDo) Select(conds ...field.Expr) IGostNodeDomainDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gostNodeDomainDo) Where(conds ...gen.Condition) IGostNodeDomainDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gostNodeDomainDo) Order(conds ...field.Expr) IGostNodeDomainDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gostNodeDomainDo) Distinct(cols ...field.Expr) IGostNodeDomainDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gostNodeDomainDo) Omit(cols ...field.Expr) IGostNodeDomainDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gostNodeDomainDo) Join(table schema.Tabler, on ...field.Expr) IGostNodeDomainDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gostNodeDomainDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGostNodeDomainDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gostNodeDomainDo) RightJoin(table schema.Tabler, on ...field.Expr) IGostNodeDomainDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gostNodeDomainDo) Group(cols ...field.Expr) IGostNodeDomainDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gostNodeDomainDo) Having(conds ...gen.Condition) IGostNodeDomainDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gostNodeDomainDo) Limit(limit int) IGostNodeDomainDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gostNodeDomainDo) Offset(offset int) IGostNodeDomainDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gostNodeDomainDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGostNodeDomainDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gostNodeDomainDo) Unscoped() IGostNodeDomainDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gostNodeDomainDo) Create(values ...*model.GostNodeDomain) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gostNodeDomainDo) CreateInBatches(values []*model.GostNodeDomain, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gostNodeDomainDo) Save(values ...*model.GostNodeDomain) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gostNodeDomainDo) First() (*model.GostNodeDomain, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodeDomain), nil
	}
}

func (g gostNodeDomainDo) Take() (*model.GostNodeDomain, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodeDomain), nil
	}
}

func (g gostNodeDomainDo) Last() (*model.GostNodeDomain, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodeDomain), nil
	}
}

func (g gostNodeDomainDo) Find() ([]*model.GostNodeDomain, error) {
	result, err := g.DO.Find()
	return result.([]*model.GostNodeDomain), err
}

func (g gostNodeDomainDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostNodeDomain, err error) {
	buf := make([]*model.GostNodeDomain, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gostNodeDomainDo) FindInBatches(result *[]*model.GostNodeDomain, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gostNodeDomainDo) Attrs(attrs ...field.AssignExpr) IGostNodeDomainDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gostNodeDomainDo) Assign(attrs ...field.AssignExpr) IGostNodeDomainDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gostNodeDomainDo) Joins(fields ...field.RelationField) IGostNodeDomainDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gostNodeDomainDo) Preload(fields ...field.RelationField) IGostNodeDomainDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gostNodeDomainDo) FirstOrInit() (*model.GostNodeDomain, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodeDomain), nil
	}
}

func (g gostNodeDomainDo) FirstOrCreate() (*model.GostNodeDomain, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodeDomain), nil
	}
}

func (g gostNodeDomainDo) FindByPage(offset int, limit int) (result []*model.GostNodeDomain, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gostNodeDomainDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gostNodeDomainDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gostNodeDomainDo) Delete(models ...*model.GostNodeDomain) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gostNodeDomainDo) withDO(do gen.Dao) *gostNodeDomainDo {
	g.DO = *do.(*gen.DO)
	return g
}
