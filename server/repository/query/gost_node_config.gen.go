// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/model"
)

func newGostNodeConfig(db *gorm.DB, opts ...gen.DOOption) gostNodeConfig {
	_gostNodeConfig := gostNodeConfig{}

	_gostNodeConfig.gostNodeConfigDo.UseDB(db, opts...)
	_gostNodeConfig.gostNodeConfigDo.UseModel(&model.GostNodeConfig{})

	tableName := _gostNodeConfig.gostNodeConfigDo.TableName()
	_gostNodeConfig.ALL = field.NewAsterisk(tableName)
	_gostNodeConfig.Id = field.NewInt(tableName, "id")
	_gostNodeConfig.Code = field.NewString(tableName, "code")
	_gostNodeConfig.AllowEdit = field.NewInt(tableName, "allow_edit")
	_gostNodeConfig.AllowDel = field.NewInt(tableName, "allow_del")
	_gostNodeConfig.CreatedAt = field.NewTime(tableName, "created_at")
	_gostNodeConfig.UpdatedAt = field.NewTime(tableName, "updated_at")
	_gostNodeConfig.IndexValue = field.NewInt(tableName, "index_value")
	_gostNodeConfig.Name = field.NewString(tableName, "name")
	_gostNodeConfig.ChargingType = field.NewInt(tableName, "charging_type")
	_gostNodeConfig.Cycle = field.NewInt(tableName, "cycle")
	_gostNodeConfig.Amount = field.NewField(tableName, "amount")
	_gostNodeConfig.Limiter = field.NewInt(tableName, "limiter")
	_gostNodeConfig.RLimiter = field.NewInt(tableName, "r_limiter")
	_gostNodeConfig.CLimiter = field.NewInt(tableName, "c_limiter")
	_gostNodeConfig.NodeCode = field.NewString(tableName, "node_code")
	_gostNodeConfig.OnlyChina = field.NewInt(tableName, "only_china")
	_gostNodeConfig.Node = gostNodeConfigBelongsToNode{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Node", "model.GostNode"),
		Configs: struct {
			field.RelationField
			Node struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Node.Configs", "model.GostNodeConfig"),
			Node: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Node.Configs.Node", "model.GostNode"),
			},
		},
	}

	_gostNodeConfig.fillFieldMap()

	return _gostNodeConfig
}

type gostNodeConfig struct {
	gostNodeConfigDo

	ALL          field.Asterisk
	Id           field.Int
	Code         field.String
	AllowEdit    field.Int
	AllowDel     field.Int
	CreatedAt    field.Time
	UpdatedAt    field.Time
	IndexValue   field.Int
	Name         field.String
	ChargingType field.Int
	Cycle        field.Int
	Amount       field.Field
	Limiter      field.Int
	RLimiter     field.Int
	CLimiter     field.Int
	NodeCode     field.String
	OnlyChina    field.Int
	Node         gostNodeConfigBelongsToNode

	fieldMap map[string]field.Expr
}

func (g gostNodeConfig) Table(newTableName string) *gostNodeConfig {
	g.gostNodeConfigDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gostNodeConfig) As(alias string) *gostNodeConfig {
	g.gostNodeConfigDo.DO = *(g.gostNodeConfigDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gostNodeConfig) updateTableName(table string) *gostNodeConfig {
	g.ALL = field.NewAsterisk(table)
	g.Id = field.NewInt(table, "id")
	g.Code = field.NewString(table, "code")
	g.AllowEdit = field.NewInt(table, "allow_edit")
	g.AllowDel = field.NewInt(table, "allow_del")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.IndexValue = field.NewInt(table, "index_value")
	g.Name = field.NewString(table, "name")
	g.ChargingType = field.NewInt(table, "charging_type")
	g.Cycle = field.NewInt(table, "cycle")
	g.Amount = field.NewField(table, "amount")
	g.Limiter = field.NewInt(table, "limiter")
	g.RLimiter = field.NewInt(table, "r_limiter")
	g.CLimiter = field.NewInt(table, "c_limiter")
	g.NodeCode = field.NewString(table, "node_code")
	g.OnlyChina = field.NewInt(table, "only_china")

	g.fillFieldMap()

	return g
}

func (g *gostNodeConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gostNodeConfig) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 17)
	g.fieldMap["id"] = g.Id
	g.fieldMap["code"] = g.Code
	g.fieldMap["allow_edit"] = g.AllowEdit
	g.fieldMap["allow_del"] = g.AllowDel
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["index_value"] = g.IndexValue
	g.fieldMap["name"] = g.Name
	g.fieldMap["charging_type"] = g.ChargingType
	g.fieldMap["cycle"] = g.Cycle
	g.fieldMap["amount"] = g.Amount
	g.fieldMap["limiter"] = g.Limiter
	g.fieldMap["r_limiter"] = g.RLimiter
	g.fieldMap["c_limiter"] = g.CLimiter
	g.fieldMap["node_code"] = g.NodeCode
	g.fieldMap["only_china"] = g.OnlyChina

}

func (g gostNodeConfig) clone(db *gorm.DB) gostNodeConfig {
	g.gostNodeConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gostNodeConfig) replaceDB(db *gorm.DB) gostNodeConfig {
	g.gostNodeConfigDo.ReplaceDB(db)
	return g
}

type gostNodeConfigBelongsToNode struct {
	db *gorm.DB

	field.RelationField

	Configs struct {
		field.RelationField
		Node struct {
			field.RelationField
		}
	}
}

func (a gostNodeConfigBelongsToNode) Where(conds ...field.Expr) *gostNodeConfigBelongsToNode {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a gostNodeConfigBelongsToNode) WithContext(ctx context.Context) *gostNodeConfigBelongsToNode {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a gostNodeConfigBelongsToNode) Session(session *gorm.Session) *gostNodeConfigBelongsToNode {
	a.db = a.db.Session(session)
	return &a
}

func (a gostNodeConfigBelongsToNode) Model(m *model.GostNodeConfig) *gostNodeConfigBelongsToNodeTx {
	return &gostNodeConfigBelongsToNodeTx{a.db.Model(m).Association(a.Name())}
}

type gostNodeConfigBelongsToNodeTx struct{ tx *gorm.Association }

func (a gostNodeConfigBelongsToNodeTx) Find() (result *model.GostNode, err error) {
	return result, a.tx.Find(&result)
}

func (a gostNodeConfigBelongsToNodeTx) Append(values ...*model.GostNode) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a gostNodeConfigBelongsToNodeTx) Replace(values ...*model.GostNode) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a gostNodeConfigBelongsToNodeTx) Delete(values ...*model.GostNode) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a gostNodeConfigBelongsToNodeTx) Clear() error {
	return a.tx.Clear()
}

func (a gostNodeConfigBelongsToNodeTx) Count() int64 {
	return a.tx.Count()
}

type gostNodeConfigDo struct{ gen.DO }

type IGostNodeConfigDo interface {
	gen.SubQuery
	Debug() IGostNodeConfigDo
	WithContext(ctx context.Context) IGostNodeConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGostNodeConfigDo
	WriteDB() IGostNodeConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGostNodeConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGostNodeConfigDo
	Not(conds ...gen.Condition) IGostNodeConfigDo
	Or(conds ...gen.Condition) IGostNodeConfigDo
	Select(conds ...field.Expr) IGostNodeConfigDo
	Where(conds ...gen.Condition) IGostNodeConfigDo
	Order(conds ...field.Expr) IGostNodeConfigDo
	Distinct(cols ...field.Expr) IGostNodeConfigDo
	Omit(cols ...field.Expr) IGostNodeConfigDo
	Join(table schema.Tabler, on ...field.Expr) IGostNodeConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGostNodeConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGostNodeConfigDo
	Group(cols ...field.Expr) IGostNodeConfigDo
	Having(conds ...gen.Condition) IGostNodeConfigDo
	Limit(limit int) IGostNodeConfigDo
	Offset(offset int) IGostNodeConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGostNodeConfigDo
	Unscoped() IGostNodeConfigDo
	Create(values ...*model.GostNodeConfig) error
	CreateInBatches(values []*model.GostNodeConfig, batchSize int) error
	Save(values ...*model.GostNodeConfig) error
	First() (*model.GostNodeConfig, error)
	Take() (*model.GostNodeConfig, error)
	Last() (*model.GostNodeConfig, error)
	Find() ([]*model.GostNodeConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostNodeConfig, err error)
	FindInBatches(result *[]*model.GostNodeConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GostNodeConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGostNodeConfigDo
	Assign(attrs ...field.AssignExpr) IGostNodeConfigDo
	Joins(fields ...field.RelationField) IGostNodeConfigDo
	Preload(fields ...field.RelationField) IGostNodeConfigDo
	FirstOrInit() (*model.GostNodeConfig, error)
	FirstOrCreate() (*model.GostNodeConfig, error)
	FindByPage(offset int, limit int) (result []*model.GostNodeConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGostNodeConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gostNodeConfigDo) Debug() IGostNodeConfigDo {
	return g.withDO(g.DO.Debug())
}

func (g gostNodeConfigDo) WithContext(ctx context.Context) IGostNodeConfigDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gostNodeConfigDo) ReadDB() IGostNodeConfigDo {
	return g.Clauses(dbresolver.Read)
}

func (g gostNodeConfigDo) WriteDB() IGostNodeConfigDo {
	return g.Clauses(dbresolver.Write)
}

func (g gostNodeConfigDo) Session(config *gorm.Session) IGostNodeConfigDo {
	return g.withDO(g.DO.Session(config))
}

func (g gostNodeConfigDo) Clauses(conds ...clause.Expression) IGostNodeConfigDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gostNodeConfigDo) Returning(value interface{}, columns ...string) IGostNodeConfigDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gostNodeConfigDo) Not(conds ...gen.Condition) IGostNodeConfigDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gostNodeConfigDo) Or(conds ...gen.Condition) IGostNodeConfigDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gostNodeConfigDo) Select(conds ...field.Expr) IGostNodeConfigDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gostNodeConfigDo) Where(conds ...gen.Condition) IGostNodeConfigDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gostNodeConfigDo) Order(conds ...field.Expr) IGostNodeConfigDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gostNodeConfigDo) Distinct(cols ...field.Expr) IGostNodeConfigDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gostNodeConfigDo) Omit(cols ...field.Expr) IGostNodeConfigDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gostNodeConfigDo) Join(table schema.Tabler, on ...field.Expr) IGostNodeConfigDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gostNodeConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGostNodeConfigDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gostNodeConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IGostNodeConfigDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gostNodeConfigDo) Group(cols ...field.Expr) IGostNodeConfigDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gostNodeConfigDo) Having(conds ...gen.Condition) IGostNodeConfigDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gostNodeConfigDo) Limit(limit int) IGostNodeConfigDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gostNodeConfigDo) Offset(offset int) IGostNodeConfigDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gostNodeConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGostNodeConfigDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gostNodeConfigDo) Unscoped() IGostNodeConfigDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gostNodeConfigDo) Create(values ...*model.GostNodeConfig) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gostNodeConfigDo) CreateInBatches(values []*model.GostNodeConfig, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gostNodeConfigDo) Save(values ...*model.GostNodeConfig) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gostNodeConfigDo) First() (*model.GostNodeConfig, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodeConfig), nil
	}
}

func (g gostNodeConfigDo) Take() (*model.GostNodeConfig, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodeConfig), nil
	}
}

func (g gostNodeConfigDo) Last() (*model.GostNodeConfig, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodeConfig), nil
	}
}

func (g gostNodeConfigDo) Find() ([]*model.GostNodeConfig, error) {
	result, err := g.DO.Find()
	return result.([]*model.GostNodeConfig), err
}

func (g gostNodeConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostNodeConfig, err error) {
	buf := make([]*model.GostNodeConfig, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gostNodeConfigDo) FindInBatches(result *[]*model.GostNodeConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gostNodeConfigDo) Attrs(attrs ...field.AssignExpr) IGostNodeConfigDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gostNodeConfigDo) Assign(attrs ...field.AssignExpr) IGostNodeConfigDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gostNodeConfigDo) Joins(fields ...field.RelationField) IGostNodeConfigDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gostNodeConfigDo) Preload(fields ...field.RelationField) IGostNodeConfigDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gostNodeConfigDo) FirstOrInit() (*model.GostNodeConfig, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodeConfig), nil
	}
}

func (g gostNodeConfigDo) FirstOrCreate() (*model.GostNodeConfig, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodeConfig), nil
	}
}

func (g gostNodeConfigDo) FindByPage(offset int, limit int) (result []*model.GostNodeConfig, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gostNodeConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gostNodeConfigDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gostNodeConfigDo) Delete(models ...*model.GostNodeConfig) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gostNodeConfigDo) withDO(do gen.Dao) *gostNodeConfigDo {
	g.DO = *do.(*gen.DO)
	return g
}
