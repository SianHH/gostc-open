// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/model"
)

func newGostClientP2P(db *gorm.DB, opts ...gen.DOOption) gostClientP2P {
	_gostClientP2P := gostClientP2P{}

	_gostClientP2P.gostClientP2PDo.UseDB(db, opts...)
	_gostClientP2P.gostClientP2PDo.UseModel(&model.GostClientP2P{})

	tableName := _gostClientP2P.gostClientP2PDo.TableName()
	_gostClientP2P.ALL = field.NewAsterisk(tableName)
	_gostClientP2P.Id = field.NewInt(tableName, "id")
	_gostClientP2P.Code = field.NewString(tableName, "code")
	_gostClientP2P.AllowEdit = field.NewInt(tableName, "allow_edit")
	_gostClientP2P.AllowDel = field.NewInt(tableName, "allow_del")
	_gostClientP2P.Version = field.NewInt64(tableName, "version")
	_gostClientP2P.CreatedAt = field.NewTime(tableName, "created_at")
	_gostClientP2P.UpdatedAt = field.NewTime(tableName, "updated_at")
	_gostClientP2P.Name = field.NewString(tableName, "name")
	_gostClientP2P.TargetIp = field.NewString(tableName, "target_ip")
	_gostClientP2P.TargetPort = field.NewString(tableName, "target_port")
	_gostClientP2P.VKey = field.NewString(tableName, "v_key")
	_gostClientP2P.NodeCode = field.NewString(tableName, "node_code")
	_gostClientP2P.ClientCode = field.NewString(tableName, "client_code")
	_gostClientP2P.UserCode = field.NewString(tableName, "user_code")
	_gostClientP2P.Enable = field.NewInt(tableName, "enable")
	_gostClientP2P.Status = field.NewInt(tableName, "status")
	_gostClientP2P.ChargingType = field.NewInt(tableName, "charging_type")
	_gostClientP2P.Cycle = field.NewInt(tableName, "cycle")
	_gostClientP2P.Amount = field.NewField(tableName, "amount")
	_gostClientP2P.Limiter = field.NewInt(tableName, "limiter")
	_gostClientP2P.RLimiter = field.NewInt(tableName, "r_limiter")
	_gostClientP2P.CLimiter = field.NewInt(tableName, "c_limiter")
	_gostClientP2P.OnlyChina = field.NewInt(tableName, "only_china")
	_gostClientP2P.ExpAt = field.NewInt64(tableName, "exp_at")
	_gostClientP2P.Node = gostClientP2PBelongsToNode{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Node", "model.GostNode"),
		Configs: struct {
			field.RelationField
			Node struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Node.Configs", "model.GostNodeConfig"),
			Node: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Node.Configs.Node", "model.GostNode"),
			},
		},
	}

	_gostClientP2P.Client = gostClientP2PBelongsToClient{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Client", "model.GostClient"),
		User: struct {
			field.RelationField
			BindEmail struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Client.User", "model.SystemUser"),
			BindEmail: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Client.User.BindEmail", "model.SystemUserEmail"),
			},
		},
	}

	_gostClientP2P.User = gostClientP2PBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.SystemUser"),
	}

	_gostClientP2P.fillFieldMap()

	return _gostClientP2P
}

type gostClientP2P struct {
	gostClientP2PDo

	ALL          field.Asterisk
	Id           field.Int
	Code         field.String
	AllowEdit    field.Int
	AllowDel     field.Int
	Version      field.Int64
	CreatedAt    field.Time
	UpdatedAt    field.Time
	Name         field.String
	TargetIp     field.String
	TargetPort   field.String
	VKey         field.String
	NodeCode     field.String
	ClientCode   field.String
	UserCode     field.String
	Enable       field.Int
	Status       field.Int
	ChargingType field.Int
	Cycle        field.Int
	Amount       field.Field
	Limiter      field.Int
	RLimiter     field.Int
	CLimiter     field.Int
	OnlyChina    field.Int
	ExpAt        field.Int64
	Node         gostClientP2PBelongsToNode

	Client gostClientP2PBelongsToClient

	User gostClientP2PBelongsToUser

	fieldMap map[string]field.Expr
}

func (g gostClientP2P) Table(newTableName string) *gostClientP2P {
	g.gostClientP2PDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gostClientP2P) As(alias string) *gostClientP2P {
	g.gostClientP2PDo.DO = *(g.gostClientP2PDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gostClientP2P) updateTableName(table string) *gostClientP2P {
	g.ALL = field.NewAsterisk(table)
	g.Id = field.NewInt(table, "id")
	g.Code = field.NewString(table, "code")
	g.AllowEdit = field.NewInt(table, "allow_edit")
	g.AllowDel = field.NewInt(table, "allow_del")
	g.Version = field.NewInt64(table, "version")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.Name = field.NewString(table, "name")
	g.TargetIp = field.NewString(table, "target_ip")
	g.TargetPort = field.NewString(table, "target_port")
	g.VKey = field.NewString(table, "v_key")
	g.NodeCode = field.NewString(table, "node_code")
	g.ClientCode = field.NewString(table, "client_code")
	g.UserCode = field.NewString(table, "user_code")
	g.Enable = field.NewInt(table, "enable")
	g.Status = field.NewInt(table, "status")
	g.ChargingType = field.NewInt(table, "charging_type")
	g.Cycle = field.NewInt(table, "cycle")
	g.Amount = field.NewField(table, "amount")
	g.Limiter = field.NewInt(table, "limiter")
	g.RLimiter = field.NewInt(table, "r_limiter")
	g.CLimiter = field.NewInt(table, "c_limiter")
	g.OnlyChina = field.NewInt(table, "only_china")
	g.ExpAt = field.NewInt64(table, "exp_at")

	g.fillFieldMap()

	return g
}

func (g *gostClientP2P) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gostClientP2P) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 27)
	g.fieldMap["id"] = g.Id
	g.fieldMap["code"] = g.Code
	g.fieldMap["allow_edit"] = g.AllowEdit
	g.fieldMap["allow_del"] = g.AllowDel
	g.fieldMap["version"] = g.Version
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["name"] = g.Name
	g.fieldMap["target_ip"] = g.TargetIp
	g.fieldMap["target_port"] = g.TargetPort
	g.fieldMap["v_key"] = g.VKey
	g.fieldMap["node_code"] = g.NodeCode
	g.fieldMap["client_code"] = g.ClientCode
	g.fieldMap["user_code"] = g.UserCode
	g.fieldMap["enable"] = g.Enable
	g.fieldMap["status"] = g.Status
	g.fieldMap["charging_type"] = g.ChargingType
	g.fieldMap["cycle"] = g.Cycle
	g.fieldMap["amount"] = g.Amount
	g.fieldMap["limiter"] = g.Limiter
	g.fieldMap["r_limiter"] = g.RLimiter
	g.fieldMap["c_limiter"] = g.CLimiter
	g.fieldMap["only_china"] = g.OnlyChina
	g.fieldMap["exp_at"] = g.ExpAt

}

func (g gostClientP2P) clone(db *gorm.DB) gostClientP2P {
	g.gostClientP2PDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gostClientP2P) replaceDB(db *gorm.DB) gostClientP2P {
	g.gostClientP2PDo.ReplaceDB(db)
	return g
}

type gostClientP2PBelongsToNode struct {
	db *gorm.DB

	field.RelationField

	Configs struct {
		field.RelationField
		Node struct {
			field.RelationField
		}
	}
}

func (a gostClientP2PBelongsToNode) Where(conds ...field.Expr) *gostClientP2PBelongsToNode {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a gostClientP2PBelongsToNode) WithContext(ctx context.Context) *gostClientP2PBelongsToNode {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a gostClientP2PBelongsToNode) Session(session *gorm.Session) *gostClientP2PBelongsToNode {
	a.db = a.db.Session(session)
	return &a
}

func (a gostClientP2PBelongsToNode) Model(m *model.GostClientP2P) *gostClientP2PBelongsToNodeTx {
	return &gostClientP2PBelongsToNodeTx{a.db.Model(m).Association(a.Name())}
}

type gostClientP2PBelongsToNodeTx struct{ tx *gorm.Association }

func (a gostClientP2PBelongsToNodeTx) Find() (result *model.GostNode, err error) {
	return result, a.tx.Find(&result)
}

func (a gostClientP2PBelongsToNodeTx) Append(values ...*model.GostNode) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a gostClientP2PBelongsToNodeTx) Replace(values ...*model.GostNode) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a gostClientP2PBelongsToNodeTx) Delete(values ...*model.GostNode) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a gostClientP2PBelongsToNodeTx) Clear() error {
	return a.tx.Clear()
}

func (a gostClientP2PBelongsToNodeTx) Count() int64 {
	return a.tx.Count()
}

type gostClientP2PBelongsToClient struct {
	db *gorm.DB

	field.RelationField

	User struct {
		field.RelationField
		BindEmail struct {
			field.RelationField
		}
	}
}

func (a gostClientP2PBelongsToClient) Where(conds ...field.Expr) *gostClientP2PBelongsToClient {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a gostClientP2PBelongsToClient) WithContext(ctx context.Context) *gostClientP2PBelongsToClient {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a gostClientP2PBelongsToClient) Session(session *gorm.Session) *gostClientP2PBelongsToClient {
	a.db = a.db.Session(session)
	return &a
}

func (a gostClientP2PBelongsToClient) Model(m *model.GostClientP2P) *gostClientP2PBelongsToClientTx {
	return &gostClientP2PBelongsToClientTx{a.db.Model(m).Association(a.Name())}
}

type gostClientP2PBelongsToClientTx struct{ tx *gorm.Association }

func (a gostClientP2PBelongsToClientTx) Find() (result *model.GostClient, err error) {
	return result, a.tx.Find(&result)
}

func (a gostClientP2PBelongsToClientTx) Append(values ...*model.GostClient) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a gostClientP2PBelongsToClientTx) Replace(values ...*model.GostClient) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a gostClientP2PBelongsToClientTx) Delete(values ...*model.GostClient) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a gostClientP2PBelongsToClientTx) Clear() error {
	return a.tx.Clear()
}

func (a gostClientP2PBelongsToClientTx) Count() int64 {
	return a.tx.Count()
}

type gostClientP2PBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a gostClientP2PBelongsToUser) Where(conds ...field.Expr) *gostClientP2PBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a gostClientP2PBelongsToUser) WithContext(ctx context.Context) *gostClientP2PBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a gostClientP2PBelongsToUser) Session(session *gorm.Session) *gostClientP2PBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a gostClientP2PBelongsToUser) Model(m *model.GostClientP2P) *gostClientP2PBelongsToUserTx {
	return &gostClientP2PBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type gostClientP2PBelongsToUserTx struct{ tx *gorm.Association }

func (a gostClientP2PBelongsToUserTx) Find() (result *model.SystemUser, err error) {
	return result, a.tx.Find(&result)
}

func (a gostClientP2PBelongsToUserTx) Append(values ...*model.SystemUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a gostClientP2PBelongsToUserTx) Replace(values ...*model.SystemUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a gostClientP2PBelongsToUserTx) Delete(values ...*model.SystemUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a gostClientP2PBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a gostClientP2PBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type gostClientP2PDo struct{ gen.DO }

type IGostClientP2PDo interface {
	gen.SubQuery
	Debug() IGostClientP2PDo
	WithContext(ctx context.Context) IGostClientP2PDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGostClientP2PDo
	WriteDB() IGostClientP2PDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGostClientP2PDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGostClientP2PDo
	Not(conds ...gen.Condition) IGostClientP2PDo
	Or(conds ...gen.Condition) IGostClientP2PDo
	Select(conds ...field.Expr) IGostClientP2PDo
	Where(conds ...gen.Condition) IGostClientP2PDo
	Order(conds ...field.Expr) IGostClientP2PDo
	Distinct(cols ...field.Expr) IGostClientP2PDo
	Omit(cols ...field.Expr) IGostClientP2PDo
	Join(table schema.Tabler, on ...field.Expr) IGostClientP2PDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGostClientP2PDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGostClientP2PDo
	Group(cols ...field.Expr) IGostClientP2PDo
	Having(conds ...gen.Condition) IGostClientP2PDo
	Limit(limit int) IGostClientP2PDo
	Offset(offset int) IGostClientP2PDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGostClientP2PDo
	Unscoped() IGostClientP2PDo
	Create(values ...*model.GostClientP2P) error
	CreateInBatches(values []*model.GostClientP2P, batchSize int) error
	Save(values ...*model.GostClientP2P) error
	First() (*model.GostClientP2P, error)
	Take() (*model.GostClientP2P, error)
	Last() (*model.GostClientP2P, error)
	Find() ([]*model.GostClientP2P, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostClientP2P, err error)
	FindInBatches(result *[]*model.GostClientP2P, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GostClientP2P) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGostClientP2PDo
	Assign(attrs ...field.AssignExpr) IGostClientP2PDo
	Joins(fields ...field.RelationField) IGostClientP2PDo
	Preload(fields ...field.RelationField) IGostClientP2PDo
	FirstOrInit() (*model.GostClientP2P, error)
	FirstOrCreate() (*model.GostClientP2P, error)
	FindByPage(offset int, limit int) (result []*model.GostClientP2P, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGostClientP2PDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gostClientP2PDo) Debug() IGostClientP2PDo {
	return g.withDO(g.DO.Debug())
}

func (g gostClientP2PDo) WithContext(ctx context.Context) IGostClientP2PDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gostClientP2PDo) ReadDB() IGostClientP2PDo {
	return g.Clauses(dbresolver.Read)
}

func (g gostClientP2PDo) WriteDB() IGostClientP2PDo {
	return g.Clauses(dbresolver.Write)
}

func (g gostClientP2PDo) Session(config *gorm.Session) IGostClientP2PDo {
	return g.withDO(g.DO.Session(config))
}

func (g gostClientP2PDo) Clauses(conds ...clause.Expression) IGostClientP2PDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gostClientP2PDo) Returning(value interface{}, columns ...string) IGostClientP2PDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gostClientP2PDo) Not(conds ...gen.Condition) IGostClientP2PDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gostClientP2PDo) Or(conds ...gen.Condition) IGostClientP2PDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gostClientP2PDo) Select(conds ...field.Expr) IGostClientP2PDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gostClientP2PDo) Where(conds ...gen.Condition) IGostClientP2PDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gostClientP2PDo) Order(conds ...field.Expr) IGostClientP2PDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gostClientP2PDo) Distinct(cols ...field.Expr) IGostClientP2PDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gostClientP2PDo) Omit(cols ...field.Expr) IGostClientP2PDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gostClientP2PDo) Join(table schema.Tabler, on ...field.Expr) IGostClientP2PDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gostClientP2PDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGostClientP2PDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gostClientP2PDo) RightJoin(table schema.Tabler, on ...field.Expr) IGostClientP2PDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gostClientP2PDo) Group(cols ...field.Expr) IGostClientP2PDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gostClientP2PDo) Having(conds ...gen.Condition) IGostClientP2PDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gostClientP2PDo) Limit(limit int) IGostClientP2PDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gostClientP2PDo) Offset(offset int) IGostClientP2PDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gostClientP2PDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGostClientP2PDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gostClientP2PDo) Unscoped() IGostClientP2PDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gostClientP2PDo) Create(values ...*model.GostClientP2P) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gostClientP2PDo) CreateInBatches(values []*model.GostClientP2P, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gostClientP2PDo) Save(values ...*model.GostClientP2P) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gostClientP2PDo) First() (*model.GostClientP2P, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientP2P), nil
	}
}

func (g gostClientP2PDo) Take() (*model.GostClientP2P, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientP2P), nil
	}
}

func (g gostClientP2PDo) Last() (*model.GostClientP2P, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientP2P), nil
	}
}

func (g gostClientP2PDo) Find() ([]*model.GostClientP2P, error) {
	result, err := g.DO.Find()
	return result.([]*model.GostClientP2P), err
}

func (g gostClientP2PDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostClientP2P, err error) {
	buf := make([]*model.GostClientP2P, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gostClientP2PDo) FindInBatches(result *[]*model.GostClientP2P, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gostClientP2PDo) Attrs(attrs ...field.AssignExpr) IGostClientP2PDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gostClientP2PDo) Assign(attrs ...field.AssignExpr) IGostClientP2PDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gostClientP2PDo) Joins(fields ...field.RelationField) IGostClientP2PDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gostClientP2PDo) Preload(fields ...field.RelationField) IGostClientP2PDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gostClientP2PDo) FirstOrInit() (*model.GostClientP2P, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientP2P), nil
	}
}

func (g gostClientP2PDo) FirstOrCreate() (*model.GostClientP2P, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientP2P), nil
	}
}

func (g gostClientP2PDo) FindByPage(offset int, limit int) (result []*model.GostClientP2P, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gostClientP2PDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gostClientP2PDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gostClientP2PDo) Delete(models ...*model.GostClientP2P) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gostClientP2PDo) withDO(do gen.Dao) *gostClientP2PDo {
	g.DO = *do.(*gen.DO)
	return g
}
