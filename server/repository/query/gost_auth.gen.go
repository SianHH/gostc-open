// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/model"
)

func newGostAuth(db *gorm.DB, opts ...gen.DOOption) gostAuth {
	_gostAuth := gostAuth{}

	_gostAuth.gostAuthDo.UseDB(db, opts...)
	_gostAuth.gostAuthDo.UseModel(&model.GostAuth{})

	tableName := _gostAuth.gostAuthDo.TableName()
	_gostAuth.ALL = field.NewAsterisk(tableName)
	_gostAuth.Id = field.NewInt(tableName, "id")
	_gostAuth.Code = field.NewString(tableName, "code")
	_gostAuth.AllowEdit = field.NewInt(tableName, "allow_edit")
	_gostAuth.AllowDel = field.NewInt(tableName, "allow_del")
	_gostAuth.Version = field.NewInt64(tableName, "version")
	_gostAuth.CreatedAt = field.NewTime(tableName, "created_at")
	_gostAuth.UpdatedAt = field.NewTime(tableName, "updated_at")
	_gostAuth.TunnelType = field.NewInt(tableName, "tunnel_type")
	_gostAuth.TunnelCode = field.NewString(tableName, "tunnel_code")
	_gostAuth.User = field.NewString(tableName, "user")
	_gostAuth.Password = field.NewString(tableName, "password")

	_gostAuth.fillFieldMap()

	return _gostAuth
}

type gostAuth struct {
	gostAuthDo

	ALL        field.Asterisk
	Id         field.Int
	Code       field.String
	AllowEdit  field.Int
	AllowDel   field.Int
	Version    field.Int64
	CreatedAt  field.Time
	UpdatedAt  field.Time
	TunnelType field.Int
	TunnelCode field.String
	User       field.String
	Password   field.String

	fieldMap map[string]field.Expr
}

func (g gostAuth) Table(newTableName string) *gostAuth {
	g.gostAuthDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gostAuth) As(alias string) *gostAuth {
	g.gostAuthDo.DO = *(g.gostAuthDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gostAuth) updateTableName(table string) *gostAuth {
	g.ALL = field.NewAsterisk(table)
	g.Id = field.NewInt(table, "id")
	g.Code = field.NewString(table, "code")
	g.AllowEdit = field.NewInt(table, "allow_edit")
	g.AllowDel = field.NewInt(table, "allow_del")
	g.Version = field.NewInt64(table, "version")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.TunnelType = field.NewInt(table, "tunnel_type")
	g.TunnelCode = field.NewString(table, "tunnel_code")
	g.User = field.NewString(table, "user")
	g.Password = field.NewString(table, "password")

	g.fillFieldMap()

	return g
}

func (g *gostAuth) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gostAuth) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 11)
	g.fieldMap["id"] = g.Id
	g.fieldMap["code"] = g.Code
	g.fieldMap["allow_edit"] = g.AllowEdit
	g.fieldMap["allow_del"] = g.AllowDel
	g.fieldMap["version"] = g.Version
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["tunnel_type"] = g.TunnelType
	g.fieldMap["tunnel_code"] = g.TunnelCode
	g.fieldMap["user"] = g.User
	g.fieldMap["password"] = g.Password
}

func (g gostAuth) clone(db *gorm.DB) gostAuth {
	g.gostAuthDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gostAuth) replaceDB(db *gorm.DB) gostAuth {
	g.gostAuthDo.ReplaceDB(db)
	return g
}

type gostAuthDo struct{ gen.DO }

type IGostAuthDo interface {
	gen.SubQuery
	Debug() IGostAuthDo
	WithContext(ctx context.Context) IGostAuthDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGostAuthDo
	WriteDB() IGostAuthDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGostAuthDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGostAuthDo
	Not(conds ...gen.Condition) IGostAuthDo
	Or(conds ...gen.Condition) IGostAuthDo
	Select(conds ...field.Expr) IGostAuthDo
	Where(conds ...gen.Condition) IGostAuthDo
	Order(conds ...field.Expr) IGostAuthDo
	Distinct(cols ...field.Expr) IGostAuthDo
	Omit(cols ...field.Expr) IGostAuthDo
	Join(table schema.Tabler, on ...field.Expr) IGostAuthDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGostAuthDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGostAuthDo
	Group(cols ...field.Expr) IGostAuthDo
	Having(conds ...gen.Condition) IGostAuthDo
	Limit(limit int) IGostAuthDo
	Offset(offset int) IGostAuthDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGostAuthDo
	Unscoped() IGostAuthDo
	Create(values ...*model.GostAuth) error
	CreateInBatches(values []*model.GostAuth, batchSize int) error
	Save(values ...*model.GostAuth) error
	First() (*model.GostAuth, error)
	Take() (*model.GostAuth, error)
	Last() (*model.GostAuth, error)
	Find() ([]*model.GostAuth, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostAuth, err error)
	FindInBatches(result *[]*model.GostAuth, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GostAuth) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGostAuthDo
	Assign(attrs ...field.AssignExpr) IGostAuthDo
	Joins(fields ...field.RelationField) IGostAuthDo
	Preload(fields ...field.RelationField) IGostAuthDo
	FirstOrInit() (*model.GostAuth, error)
	FirstOrCreate() (*model.GostAuth, error)
	FindByPage(offset int, limit int) (result []*model.GostAuth, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGostAuthDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gostAuthDo) Debug() IGostAuthDo {
	return g.withDO(g.DO.Debug())
}

func (g gostAuthDo) WithContext(ctx context.Context) IGostAuthDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gostAuthDo) ReadDB() IGostAuthDo {
	return g.Clauses(dbresolver.Read)
}

func (g gostAuthDo) WriteDB() IGostAuthDo {
	return g.Clauses(dbresolver.Write)
}

func (g gostAuthDo) Session(config *gorm.Session) IGostAuthDo {
	return g.withDO(g.DO.Session(config))
}

func (g gostAuthDo) Clauses(conds ...clause.Expression) IGostAuthDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gostAuthDo) Returning(value interface{}, columns ...string) IGostAuthDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gostAuthDo) Not(conds ...gen.Condition) IGostAuthDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gostAuthDo) Or(conds ...gen.Condition) IGostAuthDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gostAuthDo) Select(conds ...field.Expr) IGostAuthDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gostAuthDo) Where(conds ...gen.Condition) IGostAuthDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gostAuthDo) Order(conds ...field.Expr) IGostAuthDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gostAuthDo) Distinct(cols ...field.Expr) IGostAuthDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gostAuthDo) Omit(cols ...field.Expr) IGostAuthDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gostAuthDo) Join(table schema.Tabler, on ...field.Expr) IGostAuthDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gostAuthDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGostAuthDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gostAuthDo) RightJoin(table schema.Tabler, on ...field.Expr) IGostAuthDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gostAuthDo) Group(cols ...field.Expr) IGostAuthDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gostAuthDo) Having(conds ...gen.Condition) IGostAuthDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gostAuthDo) Limit(limit int) IGostAuthDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gostAuthDo) Offset(offset int) IGostAuthDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gostAuthDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGostAuthDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gostAuthDo) Unscoped() IGostAuthDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gostAuthDo) Create(values ...*model.GostAuth) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gostAuthDo) CreateInBatches(values []*model.GostAuth, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gostAuthDo) Save(values ...*model.GostAuth) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gostAuthDo) First() (*model.GostAuth, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostAuth), nil
	}
}

func (g gostAuthDo) Take() (*model.GostAuth, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostAuth), nil
	}
}

func (g gostAuthDo) Last() (*model.GostAuth, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostAuth), nil
	}
}

func (g gostAuthDo) Find() ([]*model.GostAuth, error) {
	result, err := g.DO.Find()
	return result.([]*model.GostAuth), err
}

func (g gostAuthDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostAuth, err error) {
	buf := make([]*model.GostAuth, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gostAuthDo) FindInBatches(result *[]*model.GostAuth, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gostAuthDo) Attrs(attrs ...field.AssignExpr) IGostAuthDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gostAuthDo) Assign(attrs ...field.AssignExpr) IGostAuthDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gostAuthDo) Joins(fields ...field.RelationField) IGostAuthDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gostAuthDo) Preload(fields ...field.RelationField) IGostAuthDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gostAuthDo) FirstOrInit() (*model.GostAuth, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostAuth), nil
	}
}

func (g gostAuthDo) FirstOrCreate() (*model.GostAuth, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostAuth), nil
	}
}

func (g gostAuthDo) FindByPage(offset int, limit int) (result []*model.GostAuth, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gostAuthDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gostAuthDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gostAuthDo) Delete(models ...*model.GostAuth) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gostAuthDo) withDO(do gen.Dao) *gostAuthDo {
	g.DO = *do.(*gen.DO)
	return g
}
