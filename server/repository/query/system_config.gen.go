// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/model"
)

func newSystemConfig(db *gorm.DB, opts ...gen.DOOption) systemConfig {
	_systemConfig := systemConfig{}

	_systemConfig.systemConfigDo.UseDB(db, opts...)
	_systemConfig.systemConfigDo.UseModel(&model.SystemConfig{})

	tableName := _systemConfig.systemConfigDo.TableName()
	_systemConfig.ALL = field.NewAsterisk(tableName)
	_systemConfig.Kind = field.NewString(tableName, "kind")
	_systemConfig.Key = field.NewString(tableName, "key")
	_systemConfig.Value = field.NewString(tableName, "value")

	_systemConfig.fillFieldMap()

	return _systemConfig
}

type systemConfig struct {
	systemConfigDo

	ALL   field.Asterisk
	Kind  field.String
	Key   field.String
	Value field.String

	fieldMap map[string]field.Expr
}

func (s systemConfig) Table(newTableName string) *systemConfig {
	s.systemConfigDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemConfig) As(alias string) *systemConfig {
	s.systemConfigDo.DO = *(s.systemConfigDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemConfig) updateTableName(table string) *systemConfig {
	s.ALL = field.NewAsterisk(table)
	s.Kind = field.NewString(table, "kind")
	s.Key = field.NewString(table, "key")
	s.Value = field.NewString(table, "value")

	s.fillFieldMap()

	return s
}

func (s *systemConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemConfig) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["kind"] = s.Kind
	s.fieldMap["key"] = s.Key
	s.fieldMap["value"] = s.Value
}

func (s systemConfig) clone(db *gorm.DB) systemConfig {
	s.systemConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s systemConfig) replaceDB(db *gorm.DB) systemConfig {
	s.systemConfigDo.ReplaceDB(db)
	return s
}

type systemConfigDo struct{ gen.DO }

type ISystemConfigDo interface {
	gen.SubQuery
	Debug() ISystemConfigDo
	WithContext(ctx context.Context) ISystemConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISystemConfigDo
	WriteDB() ISystemConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISystemConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemConfigDo
	Not(conds ...gen.Condition) ISystemConfigDo
	Or(conds ...gen.Condition) ISystemConfigDo
	Select(conds ...field.Expr) ISystemConfigDo
	Where(conds ...gen.Condition) ISystemConfigDo
	Order(conds ...field.Expr) ISystemConfigDo
	Distinct(cols ...field.Expr) ISystemConfigDo
	Omit(cols ...field.Expr) ISystemConfigDo
	Join(table schema.Tabler, on ...field.Expr) ISystemConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemConfigDo
	Group(cols ...field.Expr) ISystemConfigDo
	Having(conds ...gen.Condition) ISystemConfigDo
	Limit(limit int) ISystemConfigDo
	Offset(offset int) ISystemConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemConfigDo
	Unscoped() ISystemConfigDo
	Create(values ...*model.SystemConfig) error
	CreateInBatches(values []*model.SystemConfig, batchSize int) error
	Save(values ...*model.SystemConfig) error
	First() (*model.SystemConfig, error)
	Take() (*model.SystemConfig, error)
	Last() (*model.SystemConfig, error)
	Find() ([]*model.SystemConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemConfig, err error)
	FindInBatches(result *[]*model.SystemConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemConfigDo
	Assign(attrs ...field.AssignExpr) ISystemConfigDo
	Joins(fields ...field.RelationField) ISystemConfigDo
	Preload(fields ...field.RelationField) ISystemConfigDo
	FirstOrInit() (*model.SystemConfig, error)
	FirstOrCreate() (*model.SystemConfig, error)
	FindByPage(offset int, limit int) (result []*model.SystemConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemConfigDo) Debug() ISystemConfigDo {
	return s.withDO(s.DO.Debug())
}

func (s systemConfigDo) WithContext(ctx context.Context) ISystemConfigDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemConfigDo) ReadDB() ISystemConfigDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemConfigDo) WriteDB() ISystemConfigDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemConfigDo) Session(config *gorm.Session) ISystemConfigDo {
	return s.withDO(s.DO.Session(config))
}

func (s systemConfigDo) Clauses(conds ...clause.Expression) ISystemConfigDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemConfigDo) Returning(value interface{}, columns ...string) ISystemConfigDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemConfigDo) Not(conds ...gen.Condition) ISystemConfigDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemConfigDo) Or(conds ...gen.Condition) ISystemConfigDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemConfigDo) Select(conds ...field.Expr) ISystemConfigDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemConfigDo) Where(conds ...gen.Condition) ISystemConfigDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemConfigDo) Order(conds ...field.Expr) ISystemConfigDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemConfigDo) Distinct(cols ...field.Expr) ISystemConfigDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemConfigDo) Omit(cols ...field.Expr) ISystemConfigDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemConfigDo) Join(table schema.Tabler, on ...field.Expr) ISystemConfigDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemConfigDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemConfigDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemConfigDo) Group(cols ...field.Expr) ISystemConfigDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemConfigDo) Having(conds ...gen.Condition) ISystemConfigDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemConfigDo) Limit(limit int) ISystemConfigDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemConfigDo) Offset(offset int) ISystemConfigDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemConfigDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemConfigDo) Unscoped() ISystemConfigDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemConfigDo) Create(values ...*model.SystemConfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemConfigDo) CreateInBatches(values []*model.SystemConfig, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemConfigDo) Save(values ...*model.SystemConfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemConfigDo) First() (*model.SystemConfig, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemConfig), nil
	}
}

func (s systemConfigDo) Take() (*model.SystemConfig, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemConfig), nil
	}
}

func (s systemConfigDo) Last() (*model.SystemConfig, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemConfig), nil
	}
}

func (s systemConfigDo) Find() ([]*model.SystemConfig, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemConfig), err
}

func (s systemConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemConfig, err error) {
	buf := make([]*model.SystemConfig, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemConfigDo) FindInBatches(result *[]*model.SystemConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemConfigDo) Attrs(attrs ...field.AssignExpr) ISystemConfigDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemConfigDo) Assign(attrs ...field.AssignExpr) ISystemConfigDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemConfigDo) Joins(fields ...field.RelationField) ISystemConfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemConfigDo) Preload(fields ...field.RelationField) ISystemConfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemConfigDo) FirstOrInit() (*model.SystemConfig, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemConfig), nil
	}
}

func (s systemConfigDo) FirstOrCreate() (*model.SystemConfig, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemConfig), nil
	}
}

func (s systemConfigDo) FindByPage(offset int, limit int) (result []*model.SystemConfig, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemConfigDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemConfigDo) Delete(models ...*model.SystemConfig) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemConfigDo) withDO(do gen.Dao) *systemConfigDo {
	s.DO = *do.(*gen.DO)
	return s
}
