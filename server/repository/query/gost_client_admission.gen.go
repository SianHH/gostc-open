// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/model"
)

func newGostClientAdmission(db *gorm.DB, opts ...gen.DOOption) gostClientAdmission {
	_gostClientAdmission := gostClientAdmission{}

	_gostClientAdmission.gostClientAdmissionDo.UseDB(db, opts...)
	_gostClientAdmission.gostClientAdmissionDo.UseModel(&model.GostClientAdmission{})

	tableName := _gostClientAdmission.gostClientAdmissionDo.TableName()
	_gostClientAdmission.ALL = field.NewAsterisk(tableName)
	_gostClientAdmission.WhiteEnable = field.NewInt(tableName, "white_enable")
	_gostClientAdmission.BlackEnable = field.NewInt(tableName, "black_enable")
	_gostClientAdmission.WhiteList = field.NewString(tableName, "white_list")
	_gostClientAdmission.BlackList = field.NewString(tableName, "black_list")

	_gostClientAdmission.fillFieldMap()

	return _gostClientAdmission
}

type gostClientAdmission struct {
	gostClientAdmissionDo

	ALL         field.Asterisk
	WhiteEnable field.Int
	BlackEnable field.Int
	WhiteList   field.String
	BlackList   field.String

	fieldMap map[string]field.Expr
}

func (g gostClientAdmission) Table(newTableName string) *gostClientAdmission {
	g.gostClientAdmissionDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gostClientAdmission) As(alias string) *gostClientAdmission {
	g.gostClientAdmissionDo.DO = *(g.gostClientAdmissionDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gostClientAdmission) updateTableName(table string) *gostClientAdmission {
	g.ALL = field.NewAsterisk(table)
	g.WhiteEnable = field.NewInt(table, "white_enable")
	g.BlackEnable = field.NewInt(table, "black_enable")
	g.WhiteList = field.NewString(table, "white_list")
	g.BlackList = field.NewString(table, "black_list")

	g.fillFieldMap()

	return g
}

func (g *gostClientAdmission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gostClientAdmission) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 4)
	g.fieldMap["white_enable"] = g.WhiteEnable
	g.fieldMap["black_enable"] = g.BlackEnable
	g.fieldMap["white_list"] = g.WhiteList
	g.fieldMap["black_list"] = g.BlackList
}

func (g gostClientAdmission) clone(db *gorm.DB) gostClientAdmission {
	g.gostClientAdmissionDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gostClientAdmission) replaceDB(db *gorm.DB) gostClientAdmission {
	g.gostClientAdmissionDo.ReplaceDB(db)
	return g
}

type gostClientAdmissionDo struct{ gen.DO }

type IGostClientAdmissionDo interface {
	gen.SubQuery
	Debug() IGostClientAdmissionDo
	WithContext(ctx context.Context) IGostClientAdmissionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGostClientAdmissionDo
	WriteDB() IGostClientAdmissionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGostClientAdmissionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGostClientAdmissionDo
	Not(conds ...gen.Condition) IGostClientAdmissionDo
	Or(conds ...gen.Condition) IGostClientAdmissionDo
	Select(conds ...field.Expr) IGostClientAdmissionDo
	Where(conds ...gen.Condition) IGostClientAdmissionDo
	Order(conds ...field.Expr) IGostClientAdmissionDo
	Distinct(cols ...field.Expr) IGostClientAdmissionDo
	Omit(cols ...field.Expr) IGostClientAdmissionDo
	Join(table schema.Tabler, on ...field.Expr) IGostClientAdmissionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGostClientAdmissionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGostClientAdmissionDo
	Group(cols ...field.Expr) IGostClientAdmissionDo
	Having(conds ...gen.Condition) IGostClientAdmissionDo
	Limit(limit int) IGostClientAdmissionDo
	Offset(offset int) IGostClientAdmissionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGostClientAdmissionDo
	Unscoped() IGostClientAdmissionDo
	Create(values ...*model.GostClientAdmission) error
	CreateInBatches(values []*model.GostClientAdmission, batchSize int) error
	Save(values ...*model.GostClientAdmission) error
	First() (*model.GostClientAdmission, error)
	Take() (*model.GostClientAdmission, error)
	Last() (*model.GostClientAdmission, error)
	Find() ([]*model.GostClientAdmission, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostClientAdmission, err error)
	FindInBatches(result *[]*model.GostClientAdmission, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GostClientAdmission) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGostClientAdmissionDo
	Assign(attrs ...field.AssignExpr) IGostClientAdmissionDo
	Joins(fields ...field.RelationField) IGostClientAdmissionDo
	Preload(fields ...field.RelationField) IGostClientAdmissionDo
	FirstOrInit() (*model.GostClientAdmission, error)
	FirstOrCreate() (*model.GostClientAdmission, error)
	FindByPage(offset int, limit int) (result []*model.GostClientAdmission, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGostClientAdmissionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gostClientAdmissionDo) Debug() IGostClientAdmissionDo {
	return g.withDO(g.DO.Debug())
}

func (g gostClientAdmissionDo) WithContext(ctx context.Context) IGostClientAdmissionDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gostClientAdmissionDo) ReadDB() IGostClientAdmissionDo {
	return g.Clauses(dbresolver.Read)
}

func (g gostClientAdmissionDo) WriteDB() IGostClientAdmissionDo {
	return g.Clauses(dbresolver.Write)
}

func (g gostClientAdmissionDo) Session(config *gorm.Session) IGostClientAdmissionDo {
	return g.withDO(g.DO.Session(config))
}

func (g gostClientAdmissionDo) Clauses(conds ...clause.Expression) IGostClientAdmissionDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gostClientAdmissionDo) Returning(value interface{}, columns ...string) IGostClientAdmissionDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gostClientAdmissionDo) Not(conds ...gen.Condition) IGostClientAdmissionDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gostClientAdmissionDo) Or(conds ...gen.Condition) IGostClientAdmissionDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gostClientAdmissionDo) Select(conds ...field.Expr) IGostClientAdmissionDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gostClientAdmissionDo) Where(conds ...gen.Condition) IGostClientAdmissionDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gostClientAdmissionDo) Order(conds ...field.Expr) IGostClientAdmissionDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gostClientAdmissionDo) Distinct(cols ...field.Expr) IGostClientAdmissionDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gostClientAdmissionDo) Omit(cols ...field.Expr) IGostClientAdmissionDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gostClientAdmissionDo) Join(table schema.Tabler, on ...field.Expr) IGostClientAdmissionDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gostClientAdmissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGostClientAdmissionDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gostClientAdmissionDo) RightJoin(table schema.Tabler, on ...field.Expr) IGostClientAdmissionDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gostClientAdmissionDo) Group(cols ...field.Expr) IGostClientAdmissionDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gostClientAdmissionDo) Having(conds ...gen.Condition) IGostClientAdmissionDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gostClientAdmissionDo) Limit(limit int) IGostClientAdmissionDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gostClientAdmissionDo) Offset(offset int) IGostClientAdmissionDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gostClientAdmissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGostClientAdmissionDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gostClientAdmissionDo) Unscoped() IGostClientAdmissionDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gostClientAdmissionDo) Create(values ...*model.GostClientAdmission) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gostClientAdmissionDo) CreateInBatches(values []*model.GostClientAdmission, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gostClientAdmissionDo) Save(values ...*model.GostClientAdmission) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gostClientAdmissionDo) First() (*model.GostClientAdmission, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientAdmission), nil
	}
}

func (g gostClientAdmissionDo) Take() (*model.GostClientAdmission, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientAdmission), nil
	}
}

func (g gostClientAdmissionDo) Last() (*model.GostClientAdmission, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientAdmission), nil
	}
}

func (g gostClientAdmissionDo) Find() ([]*model.GostClientAdmission, error) {
	result, err := g.DO.Find()
	return result.([]*model.GostClientAdmission), err
}

func (g gostClientAdmissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostClientAdmission, err error) {
	buf := make([]*model.GostClientAdmission, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gostClientAdmissionDo) FindInBatches(result *[]*model.GostClientAdmission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gostClientAdmissionDo) Attrs(attrs ...field.AssignExpr) IGostClientAdmissionDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gostClientAdmissionDo) Assign(attrs ...field.AssignExpr) IGostClientAdmissionDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gostClientAdmissionDo) Joins(fields ...field.RelationField) IGostClientAdmissionDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gostClientAdmissionDo) Preload(fields ...field.RelationField) IGostClientAdmissionDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gostClientAdmissionDo) FirstOrInit() (*model.GostClientAdmission, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientAdmission), nil
	}
}

func (g gostClientAdmissionDo) FirstOrCreate() (*model.GostClientAdmission, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientAdmission), nil
	}
}

func (g gostClientAdmissionDo) FindByPage(offset int, limit int) (result []*model.GostClientAdmission, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gostClientAdmissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gostClientAdmissionDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gostClientAdmissionDo) Delete(models ...*model.GostClientAdmission) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gostClientAdmissionDo) withDO(do gen.Dao) *gostClientAdmissionDo {
	g.DO = *do.(*gen.DO)
	return g
}
