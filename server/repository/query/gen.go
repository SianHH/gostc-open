// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                   = new(Query)
	GostAuth            *gostAuth
	GostClient          *gostClient
	GostClientAdmission *gostClientAdmission
	GostClientConfig    *gostClientConfig
	GostClientForward   *gostClientForward
	GostClientHost      *gostClientHost
	GostClientLogger    *gostClientLogger
	GostClientTunnel    *gostClientTunnel
	GostNode            *gostNode
	GostNodeBind        *gostNodeBind
	GostNodeConfig      *gostNodeConfig
	GostNodeDomain      *gostNodeDomain
	GostNodeLogger      *gostNodeLogger
	GostNodePort        *gostNodePort
	GostObs             *gostObs
	SystemConfig        *systemConfig
	SystemNotice        *systemNotice
	SystemUser          *systemUser
	SystemUserCheckin   *systemUserCheckin
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	GostAuth = &Q.GostAuth
	GostClient = &Q.GostClient
	GostClientAdmission = &Q.GostClientAdmission
	GostClientConfig = &Q.GostClientConfig
	GostClientForward = &Q.GostClientForward
	GostClientHost = &Q.GostClientHost
	GostClientLogger = &Q.GostClientLogger
	GostClientTunnel = &Q.GostClientTunnel
	GostNode = &Q.GostNode
	GostNodeBind = &Q.GostNodeBind
	GostNodeConfig = &Q.GostNodeConfig
	GostNodeDomain = &Q.GostNodeDomain
	GostNodeLogger = &Q.GostNodeLogger
	GostNodePort = &Q.GostNodePort
	GostObs = &Q.GostObs
	SystemConfig = &Q.SystemConfig
	SystemNotice = &Q.SystemNotice
	SystemUser = &Q.SystemUser
	SystemUserCheckin = &Q.SystemUserCheckin
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                  db,
		GostAuth:            newGostAuth(db, opts...),
		GostClient:          newGostClient(db, opts...),
		GostClientAdmission: newGostClientAdmission(db, opts...),
		GostClientConfig:    newGostClientConfig(db, opts...),
		GostClientForward:   newGostClientForward(db, opts...),
		GostClientHost:      newGostClientHost(db, opts...),
		GostClientLogger:    newGostClientLogger(db, opts...),
		GostClientTunnel:    newGostClientTunnel(db, opts...),
		GostNode:            newGostNode(db, opts...),
		GostNodeBind:        newGostNodeBind(db, opts...),
		GostNodeConfig:      newGostNodeConfig(db, opts...),
		GostNodeDomain:      newGostNodeDomain(db, opts...),
		GostNodeLogger:      newGostNodeLogger(db, opts...),
		GostNodePort:        newGostNodePort(db, opts...),
		GostObs:             newGostObs(db, opts...),
		SystemConfig:        newSystemConfig(db, opts...),
		SystemNotice:        newSystemNotice(db, opts...),
		SystemUser:          newSystemUser(db, opts...),
		SystemUserCheckin:   newSystemUserCheckin(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	GostAuth            gostAuth
	GostClient          gostClient
	GostClientAdmission gostClientAdmission
	GostClientConfig    gostClientConfig
	GostClientForward   gostClientForward
	GostClientHost      gostClientHost
	GostClientLogger    gostClientLogger
	GostClientTunnel    gostClientTunnel
	GostNode            gostNode
	GostNodeBind        gostNodeBind
	GostNodeConfig      gostNodeConfig
	GostNodeDomain      gostNodeDomain
	GostNodeLogger      gostNodeLogger
	GostNodePort        gostNodePort
	GostObs             gostObs
	SystemConfig        systemConfig
	SystemNotice        systemNotice
	SystemUser          systemUser
	SystemUserCheckin   systemUserCheckin
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		GostAuth:            q.GostAuth.clone(db),
		GostClient:          q.GostClient.clone(db),
		GostClientAdmission: q.GostClientAdmission.clone(db),
		GostClientConfig:    q.GostClientConfig.clone(db),
		GostClientForward:   q.GostClientForward.clone(db),
		GostClientHost:      q.GostClientHost.clone(db),
		GostClientLogger:    q.GostClientLogger.clone(db),
		GostClientTunnel:    q.GostClientTunnel.clone(db),
		GostNode:            q.GostNode.clone(db),
		GostNodeBind:        q.GostNodeBind.clone(db),
		GostNodeConfig:      q.GostNodeConfig.clone(db),
		GostNodeDomain:      q.GostNodeDomain.clone(db),
		GostNodeLogger:      q.GostNodeLogger.clone(db),
		GostNodePort:        q.GostNodePort.clone(db),
		GostObs:             q.GostObs.clone(db),
		SystemConfig:        q.SystemConfig.clone(db),
		SystemNotice:        q.SystemNotice.clone(db),
		SystemUser:          q.SystemUser.clone(db),
		SystemUserCheckin:   q.SystemUserCheckin.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		GostAuth:            q.GostAuth.replaceDB(db),
		GostClient:          q.GostClient.replaceDB(db),
		GostClientAdmission: q.GostClientAdmission.replaceDB(db),
		GostClientConfig:    q.GostClientConfig.replaceDB(db),
		GostClientForward:   q.GostClientForward.replaceDB(db),
		GostClientHost:      q.GostClientHost.replaceDB(db),
		GostClientLogger:    q.GostClientLogger.replaceDB(db),
		GostClientTunnel:    q.GostClientTunnel.replaceDB(db),
		GostNode:            q.GostNode.replaceDB(db),
		GostNodeBind:        q.GostNodeBind.replaceDB(db),
		GostNodeConfig:      q.GostNodeConfig.replaceDB(db),
		GostNodeDomain:      q.GostNodeDomain.replaceDB(db),
		GostNodeLogger:      q.GostNodeLogger.replaceDB(db),
		GostNodePort:        q.GostNodePort.replaceDB(db),
		GostObs:             q.GostObs.replaceDB(db),
		SystemConfig:        q.SystemConfig.replaceDB(db),
		SystemNotice:        q.SystemNotice.replaceDB(db),
		SystemUser:          q.SystemUser.replaceDB(db),
		SystemUserCheckin:   q.SystemUserCheckin.replaceDB(db),
	}
}

type queryCtx struct {
	GostAuth            IGostAuthDo
	GostClient          IGostClientDo
	GostClientAdmission IGostClientAdmissionDo
	GostClientConfig    IGostClientConfigDo
	GostClientForward   IGostClientForwardDo
	GostClientHost      IGostClientHostDo
	GostClientLogger    IGostClientLoggerDo
	GostClientTunnel    IGostClientTunnelDo
	GostNode            IGostNodeDo
	GostNodeBind        IGostNodeBindDo
	GostNodeConfig      IGostNodeConfigDo
	GostNodeDomain      IGostNodeDomainDo
	GostNodeLogger      IGostNodeLoggerDo
	GostNodePort        IGostNodePortDo
	GostObs             IGostObsDo
	SystemConfig        ISystemConfigDo
	SystemNotice        ISystemNoticeDo
	SystemUser          ISystemUserDo
	SystemUserCheckin   ISystemUserCheckinDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		GostAuth:            q.GostAuth.WithContext(ctx),
		GostClient:          q.GostClient.WithContext(ctx),
		GostClientAdmission: q.GostClientAdmission.WithContext(ctx),
		GostClientConfig:    q.GostClientConfig.WithContext(ctx),
		GostClientForward:   q.GostClientForward.WithContext(ctx),
		GostClientHost:      q.GostClientHost.WithContext(ctx),
		GostClientLogger:    q.GostClientLogger.WithContext(ctx),
		GostClientTunnel:    q.GostClientTunnel.WithContext(ctx),
		GostNode:            q.GostNode.WithContext(ctx),
		GostNodeBind:        q.GostNodeBind.WithContext(ctx),
		GostNodeConfig:      q.GostNodeConfig.WithContext(ctx),
		GostNodeDomain:      q.GostNodeDomain.WithContext(ctx),
		GostNodeLogger:      q.GostNodeLogger.WithContext(ctx),
		GostNodePort:        q.GostNodePort.WithContext(ctx),
		GostObs:             q.GostObs.WithContext(ctx),
		SystemConfig:        q.SystemConfig.WithContext(ctx),
		SystemNotice:        q.SystemNotice.WithContext(ctx),
		SystemUser:          q.SystemUser.WithContext(ctx),
		SystemUserCheckin:   q.SystemUserCheckin.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
