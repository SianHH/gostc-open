// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/model"
)

func newSystemNotice(db *gorm.DB, opts ...gen.DOOption) systemNotice {
	_systemNotice := systemNotice{}

	_systemNotice.systemNoticeDo.UseDB(db, opts...)
	_systemNotice.systemNoticeDo.UseModel(&model.SystemNotice{})

	tableName := _systemNotice.systemNoticeDo.TableName()
	_systemNotice.ALL = field.NewAsterisk(tableName)
	_systemNotice.Id = field.NewInt(tableName, "id")
	_systemNotice.Code = field.NewString(tableName, "code")
	_systemNotice.AllowEdit = field.NewInt(tableName, "allow_edit")
	_systemNotice.AllowDel = field.NewInt(tableName, "allow_del")
	_systemNotice.CreatedAt = field.NewTime(tableName, "created_at")
	_systemNotice.UpdatedAt = field.NewTime(tableName, "updated_at")
	_systemNotice.Title = field.NewString(tableName, "title")
	_systemNotice.Content = field.NewString(tableName, "content")
	_systemNotice.Hidden = field.NewInt(tableName, "hidden")
	_systemNotice.IndexValue = field.NewInt(tableName, "index_value")

	_systemNotice.fillFieldMap()

	return _systemNotice
}

type systemNotice struct {
	systemNoticeDo

	ALL        field.Asterisk
	Id         field.Int
	Code       field.String
	AllowEdit  field.Int
	AllowDel   field.Int
	CreatedAt  field.Time
	UpdatedAt  field.Time
	Title      field.String
	Content    field.String
	Hidden     field.Int
	IndexValue field.Int

	fieldMap map[string]field.Expr
}

func (s systemNotice) Table(newTableName string) *systemNotice {
	s.systemNoticeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemNotice) As(alias string) *systemNotice {
	s.systemNoticeDo.DO = *(s.systemNoticeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemNotice) updateTableName(table string) *systemNotice {
	s.ALL = field.NewAsterisk(table)
	s.Id = field.NewInt(table, "id")
	s.Code = field.NewString(table, "code")
	s.AllowEdit = field.NewInt(table, "allow_edit")
	s.AllowDel = field.NewInt(table, "allow_del")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.Title = field.NewString(table, "title")
	s.Content = field.NewString(table, "content")
	s.Hidden = field.NewInt(table, "hidden")
	s.IndexValue = field.NewInt(table, "index_value")

	s.fillFieldMap()

	return s
}

func (s *systemNotice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemNotice) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.Id
	s.fieldMap["code"] = s.Code
	s.fieldMap["allow_edit"] = s.AllowEdit
	s.fieldMap["allow_del"] = s.AllowDel
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["title"] = s.Title
	s.fieldMap["content"] = s.Content
	s.fieldMap["hidden"] = s.Hidden
	s.fieldMap["index_value"] = s.IndexValue
}

func (s systemNotice) clone(db *gorm.DB) systemNotice {
	s.systemNoticeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s systemNotice) replaceDB(db *gorm.DB) systemNotice {
	s.systemNoticeDo.ReplaceDB(db)
	return s
}

type systemNoticeDo struct{ gen.DO }

type ISystemNoticeDo interface {
	gen.SubQuery
	Debug() ISystemNoticeDo
	WithContext(ctx context.Context) ISystemNoticeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISystemNoticeDo
	WriteDB() ISystemNoticeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISystemNoticeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemNoticeDo
	Not(conds ...gen.Condition) ISystemNoticeDo
	Or(conds ...gen.Condition) ISystemNoticeDo
	Select(conds ...field.Expr) ISystemNoticeDo
	Where(conds ...gen.Condition) ISystemNoticeDo
	Order(conds ...field.Expr) ISystemNoticeDo
	Distinct(cols ...field.Expr) ISystemNoticeDo
	Omit(cols ...field.Expr) ISystemNoticeDo
	Join(table schema.Tabler, on ...field.Expr) ISystemNoticeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemNoticeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemNoticeDo
	Group(cols ...field.Expr) ISystemNoticeDo
	Having(conds ...gen.Condition) ISystemNoticeDo
	Limit(limit int) ISystemNoticeDo
	Offset(offset int) ISystemNoticeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemNoticeDo
	Unscoped() ISystemNoticeDo
	Create(values ...*model.SystemNotice) error
	CreateInBatches(values []*model.SystemNotice, batchSize int) error
	Save(values ...*model.SystemNotice) error
	First() (*model.SystemNotice, error)
	Take() (*model.SystemNotice, error)
	Last() (*model.SystemNotice, error)
	Find() ([]*model.SystemNotice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemNotice, err error)
	FindInBatches(result *[]*model.SystemNotice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemNotice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemNoticeDo
	Assign(attrs ...field.AssignExpr) ISystemNoticeDo
	Joins(fields ...field.RelationField) ISystemNoticeDo
	Preload(fields ...field.RelationField) ISystemNoticeDo
	FirstOrInit() (*model.SystemNotice, error)
	FirstOrCreate() (*model.SystemNotice, error)
	FindByPage(offset int, limit int) (result []*model.SystemNotice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemNoticeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemNoticeDo) Debug() ISystemNoticeDo {
	return s.withDO(s.DO.Debug())
}

func (s systemNoticeDo) WithContext(ctx context.Context) ISystemNoticeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemNoticeDo) ReadDB() ISystemNoticeDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemNoticeDo) WriteDB() ISystemNoticeDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemNoticeDo) Session(config *gorm.Session) ISystemNoticeDo {
	return s.withDO(s.DO.Session(config))
}

func (s systemNoticeDo) Clauses(conds ...clause.Expression) ISystemNoticeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemNoticeDo) Returning(value interface{}, columns ...string) ISystemNoticeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemNoticeDo) Not(conds ...gen.Condition) ISystemNoticeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemNoticeDo) Or(conds ...gen.Condition) ISystemNoticeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemNoticeDo) Select(conds ...field.Expr) ISystemNoticeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemNoticeDo) Where(conds ...gen.Condition) ISystemNoticeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemNoticeDo) Order(conds ...field.Expr) ISystemNoticeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemNoticeDo) Distinct(cols ...field.Expr) ISystemNoticeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemNoticeDo) Omit(cols ...field.Expr) ISystemNoticeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemNoticeDo) Join(table schema.Tabler, on ...field.Expr) ISystemNoticeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemNoticeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemNoticeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemNoticeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemNoticeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemNoticeDo) Group(cols ...field.Expr) ISystemNoticeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemNoticeDo) Having(conds ...gen.Condition) ISystemNoticeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemNoticeDo) Limit(limit int) ISystemNoticeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemNoticeDo) Offset(offset int) ISystemNoticeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemNoticeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemNoticeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemNoticeDo) Unscoped() ISystemNoticeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemNoticeDo) Create(values ...*model.SystemNotice) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemNoticeDo) CreateInBatches(values []*model.SystemNotice, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemNoticeDo) Save(values ...*model.SystemNotice) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemNoticeDo) First() (*model.SystemNotice, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemNotice), nil
	}
}

func (s systemNoticeDo) Take() (*model.SystemNotice, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemNotice), nil
	}
}

func (s systemNoticeDo) Last() (*model.SystemNotice, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemNotice), nil
	}
}

func (s systemNoticeDo) Find() ([]*model.SystemNotice, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemNotice), err
}

func (s systemNoticeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemNotice, err error) {
	buf := make([]*model.SystemNotice, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemNoticeDo) FindInBatches(result *[]*model.SystemNotice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemNoticeDo) Attrs(attrs ...field.AssignExpr) ISystemNoticeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemNoticeDo) Assign(attrs ...field.AssignExpr) ISystemNoticeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemNoticeDo) Joins(fields ...field.RelationField) ISystemNoticeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemNoticeDo) Preload(fields ...field.RelationField) ISystemNoticeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemNoticeDo) FirstOrInit() (*model.SystemNotice, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemNotice), nil
	}
}

func (s systemNoticeDo) FirstOrCreate() (*model.SystemNotice, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemNotice), nil
	}
}

func (s systemNoticeDo) FindByPage(offset int, limit int) (result []*model.SystemNotice, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemNoticeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemNoticeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemNoticeDo) Delete(models ...*model.SystemNotice) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemNoticeDo) withDO(do gen.Dao) *systemNoticeDo {
	s.DO = *do.(*gen.DO)
	return s
}
