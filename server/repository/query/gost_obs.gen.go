// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/model"
)

func newGostObs(db *gorm.DB, opts ...gen.DOOption) gostObs {
	_gostObs := gostObs{}

	_gostObs.gostObsDo.UseDB(db, opts...)
	_gostObs.gostObsDo.UseModel(&model.GostObs{})

	tableName := _gostObs.gostObsDo.TableName()
	_gostObs.ALL = field.NewAsterisk(tableName)
	_gostObs.Id = field.NewInt(tableName, "id")
	_gostObs.Code = field.NewString(tableName, "code")
	_gostObs.AllowEdit = field.NewInt(tableName, "allow_edit")
	_gostObs.AllowDel = field.NewInt(tableName, "allow_del")
	_gostObs.Version = field.NewInt64(tableName, "version")
	_gostObs.CreatedAt = field.NewTime(tableName, "created_at")
	_gostObs.UpdatedAt = field.NewTime(tableName, "updated_at")
	_gostObs.OriginKind = field.NewInt(tableName, "origin_kind")
	_gostObs.OriginCode = field.NewString(tableName, "origin_code")
	_gostObs.EventDate = field.NewString(tableName, "event_date")
	_gostObs.InputBytes = field.NewInt64(tableName, "input_bytes")
	_gostObs.OutputBytes = field.NewInt64(tableName, "output_bytes")

	_gostObs.fillFieldMap()

	return _gostObs
}

type gostObs struct {
	gostObsDo

	ALL         field.Asterisk
	Id          field.Int
	Code        field.String
	AllowEdit   field.Int
	AllowDel    field.Int
	Version     field.Int64
	CreatedAt   field.Time
	UpdatedAt   field.Time
	OriginKind  field.Int
	OriginCode  field.String
	EventDate   field.String
	InputBytes  field.Int64
	OutputBytes field.Int64

	fieldMap map[string]field.Expr
}

func (g gostObs) Table(newTableName string) *gostObs {
	g.gostObsDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gostObs) As(alias string) *gostObs {
	g.gostObsDo.DO = *(g.gostObsDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gostObs) updateTableName(table string) *gostObs {
	g.ALL = field.NewAsterisk(table)
	g.Id = field.NewInt(table, "id")
	g.Code = field.NewString(table, "code")
	g.AllowEdit = field.NewInt(table, "allow_edit")
	g.AllowDel = field.NewInt(table, "allow_del")
	g.Version = field.NewInt64(table, "version")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.OriginKind = field.NewInt(table, "origin_kind")
	g.OriginCode = field.NewString(table, "origin_code")
	g.EventDate = field.NewString(table, "event_date")
	g.InputBytes = field.NewInt64(table, "input_bytes")
	g.OutputBytes = field.NewInt64(table, "output_bytes")

	g.fillFieldMap()

	return g
}

func (g *gostObs) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gostObs) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 12)
	g.fieldMap["id"] = g.Id
	g.fieldMap["code"] = g.Code
	g.fieldMap["allow_edit"] = g.AllowEdit
	g.fieldMap["allow_del"] = g.AllowDel
	g.fieldMap["version"] = g.Version
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["origin_kind"] = g.OriginKind
	g.fieldMap["origin_code"] = g.OriginCode
	g.fieldMap["event_date"] = g.EventDate
	g.fieldMap["input_bytes"] = g.InputBytes
	g.fieldMap["output_bytes"] = g.OutputBytes
}

func (g gostObs) clone(db *gorm.DB) gostObs {
	g.gostObsDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gostObs) replaceDB(db *gorm.DB) gostObs {
	g.gostObsDo.ReplaceDB(db)
	return g
}

type gostObsDo struct{ gen.DO }

type IGostObsDo interface {
	gen.SubQuery
	Debug() IGostObsDo
	WithContext(ctx context.Context) IGostObsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGostObsDo
	WriteDB() IGostObsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGostObsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGostObsDo
	Not(conds ...gen.Condition) IGostObsDo
	Or(conds ...gen.Condition) IGostObsDo
	Select(conds ...field.Expr) IGostObsDo
	Where(conds ...gen.Condition) IGostObsDo
	Order(conds ...field.Expr) IGostObsDo
	Distinct(cols ...field.Expr) IGostObsDo
	Omit(cols ...field.Expr) IGostObsDo
	Join(table schema.Tabler, on ...field.Expr) IGostObsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGostObsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGostObsDo
	Group(cols ...field.Expr) IGostObsDo
	Having(conds ...gen.Condition) IGostObsDo
	Limit(limit int) IGostObsDo
	Offset(offset int) IGostObsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGostObsDo
	Unscoped() IGostObsDo
	Create(values ...*model.GostObs) error
	CreateInBatches(values []*model.GostObs, batchSize int) error
	Save(values ...*model.GostObs) error
	First() (*model.GostObs, error)
	Take() (*model.GostObs, error)
	Last() (*model.GostObs, error)
	Find() ([]*model.GostObs, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostObs, err error)
	FindInBatches(result *[]*model.GostObs, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GostObs) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGostObsDo
	Assign(attrs ...field.AssignExpr) IGostObsDo
	Joins(fields ...field.RelationField) IGostObsDo
	Preload(fields ...field.RelationField) IGostObsDo
	FirstOrInit() (*model.GostObs, error)
	FirstOrCreate() (*model.GostObs, error)
	FindByPage(offset int, limit int) (result []*model.GostObs, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGostObsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gostObsDo) Debug() IGostObsDo {
	return g.withDO(g.DO.Debug())
}

func (g gostObsDo) WithContext(ctx context.Context) IGostObsDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gostObsDo) ReadDB() IGostObsDo {
	return g.Clauses(dbresolver.Read)
}

func (g gostObsDo) WriteDB() IGostObsDo {
	return g.Clauses(dbresolver.Write)
}

func (g gostObsDo) Session(config *gorm.Session) IGostObsDo {
	return g.withDO(g.DO.Session(config))
}

func (g gostObsDo) Clauses(conds ...clause.Expression) IGostObsDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gostObsDo) Returning(value interface{}, columns ...string) IGostObsDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gostObsDo) Not(conds ...gen.Condition) IGostObsDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gostObsDo) Or(conds ...gen.Condition) IGostObsDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gostObsDo) Select(conds ...field.Expr) IGostObsDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gostObsDo) Where(conds ...gen.Condition) IGostObsDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gostObsDo) Order(conds ...field.Expr) IGostObsDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gostObsDo) Distinct(cols ...field.Expr) IGostObsDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gostObsDo) Omit(cols ...field.Expr) IGostObsDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gostObsDo) Join(table schema.Tabler, on ...field.Expr) IGostObsDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gostObsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGostObsDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gostObsDo) RightJoin(table schema.Tabler, on ...field.Expr) IGostObsDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gostObsDo) Group(cols ...field.Expr) IGostObsDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gostObsDo) Having(conds ...gen.Condition) IGostObsDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gostObsDo) Limit(limit int) IGostObsDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gostObsDo) Offset(offset int) IGostObsDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gostObsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGostObsDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gostObsDo) Unscoped() IGostObsDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gostObsDo) Create(values ...*model.GostObs) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gostObsDo) CreateInBatches(values []*model.GostObs, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gostObsDo) Save(values ...*model.GostObs) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gostObsDo) First() (*model.GostObs, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostObs), nil
	}
}

func (g gostObsDo) Take() (*model.GostObs, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostObs), nil
	}
}

func (g gostObsDo) Last() (*model.GostObs, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostObs), nil
	}
}

func (g gostObsDo) Find() ([]*model.GostObs, error) {
	result, err := g.DO.Find()
	return result.([]*model.GostObs), err
}

func (g gostObsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostObs, err error) {
	buf := make([]*model.GostObs, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gostObsDo) FindInBatches(result *[]*model.GostObs, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gostObsDo) Attrs(attrs ...field.AssignExpr) IGostObsDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gostObsDo) Assign(attrs ...field.AssignExpr) IGostObsDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gostObsDo) Joins(fields ...field.RelationField) IGostObsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gostObsDo) Preload(fields ...field.RelationField) IGostObsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gostObsDo) FirstOrInit() (*model.GostObs, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostObs), nil
	}
}

func (g gostObsDo) FirstOrCreate() (*model.GostObs, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostObs), nil
	}
}

func (g gostObsDo) FindByPage(offset int, limit int) (result []*model.GostObs, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gostObsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gostObsDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gostObsDo) Delete(models ...*model.GostObs) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gostObsDo) withDO(do gen.Dao) *gostObsDo {
	g.DO = *do.(*gen.DO)
	return g
}
