// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/model"
)

func newGostClientProxy(db *gorm.DB, opts ...gen.DOOption) gostClientProxy {
	_gostClientProxy := gostClientProxy{}

	_gostClientProxy.gostClientProxyDo.UseDB(db, opts...)
	_gostClientProxy.gostClientProxyDo.UseModel(&model.GostClientProxy{})

	tableName := _gostClientProxy.gostClientProxyDo.TableName()
	_gostClientProxy.ALL = field.NewAsterisk(tableName)
	_gostClientProxy.Id = field.NewInt(tableName, "id")
	_gostClientProxy.Code = field.NewString(tableName, "code")
	_gostClientProxy.AllowEdit = field.NewInt(tableName, "allow_edit")
	_gostClientProxy.AllowDel = field.NewInt(tableName, "allow_del")
	_gostClientProxy.Version = field.NewInt64(tableName, "version")
	_gostClientProxy.CreatedAt = field.NewTime(tableName, "created_at")
	_gostClientProxy.UpdatedAt = field.NewTime(tableName, "updated_at")
	_gostClientProxy.Name = field.NewString(tableName, "name")
	_gostClientProxy.Protocol = field.NewString(tableName, "protocol")
	_gostClientProxy.Port = field.NewString(tableName, "port")
	_gostClientProxy.AuthUser = field.NewString(tableName, "auth_user")
	_gostClientProxy.AuthPwd = field.NewString(tableName, "auth_pwd")
	_gostClientProxy.NodeCode = field.NewString(tableName, "node_code")
	_gostClientProxy.ClientCode = field.NewString(tableName, "client_code")
	_gostClientProxy.UserCode = field.NewString(tableName, "user_code")
	_gostClientProxy.Enable = field.NewInt(tableName, "enable")
	_gostClientProxy.Status = field.NewInt(tableName, "status")
	_gostClientProxy.ChargingType = field.NewInt(tableName, "charging_type")
	_gostClientProxy.Cycle = field.NewInt(tableName, "cycle")
	_gostClientProxy.Amount = field.NewField(tableName, "amount")
	_gostClientProxy.Limiter = field.NewInt(tableName, "limiter")
	_gostClientProxy.RLimiter = field.NewInt(tableName, "r_limiter")
	_gostClientProxy.CLimiter = field.NewInt(tableName, "c_limiter")
	_gostClientProxy.ExpAt = field.NewInt64(tableName, "exp_at")
	_gostClientProxy.Node = gostClientProxyBelongsToNode{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Node", "model.GostNode"),
		Configs: struct {
			field.RelationField
			Node struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Node.Configs", "model.GostNodeConfig"),
			Node: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Node.Configs.Node", "model.GostNode"),
			},
		},
	}

	_gostClientProxy.Client = gostClientProxyBelongsToClient{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Client", "model.GostClient"),
		User: struct {
			field.RelationField
			BindEmail struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Client.User", "model.SystemUser"),
			BindEmail: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Client.User.BindEmail", "model.SystemUserEmail"),
			},
		},
	}

	_gostClientProxy.User = gostClientProxyBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.SystemUser"),
	}

	_gostClientProxy.fillFieldMap()

	return _gostClientProxy
}

type gostClientProxy struct {
	gostClientProxyDo

	ALL          field.Asterisk
	Id           field.Int
	Code         field.String
	AllowEdit    field.Int
	AllowDel     field.Int
	Version      field.Int64
	CreatedAt    field.Time
	UpdatedAt    field.Time
	Name         field.String
	Protocol     field.String
	Port         field.String
	AuthUser     field.String
	AuthPwd      field.String
	NodeCode     field.String
	ClientCode   field.String
	UserCode     field.String
	Enable       field.Int
	Status       field.Int
	ChargingType field.Int
	Cycle        field.Int
	Amount       field.Field
	Limiter      field.Int
	RLimiter     field.Int
	CLimiter     field.Int
	ExpAt        field.Int64
	Node         gostClientProxyBelongsToNode

	Client gostClientProxyBelongsToClient

	User gostClientProxyBelongsToUser

	fieldMap map[string]field.Expr
}

func (g gostClientProxy) Table(newTableName string) *gostClientProxy {
	g.gostClientProxyDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gostClientProxy) As(alias string) *gostClientProxy {
	g.gostClientProxyDo.DO = *(g.gostClientProxyDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gostClientProxy) updateTableName(table string) *gostClientProxy {
	g.ALL = field.NewAsterisk(table)
	g.Id = field.NewInt(table, "id")
	g.Code = field.NewString(table, "code")
	g.AllowEdit = field.NewInt(table, "allow_edit")
	g.AllowDel = field.NewInt(table, "allow_del")
	g.Version = field.NewInt64(table, "version")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.Name = field.NewString(table, "name")
	g.Protocol = field.NewString(table, "protocol")
	g.Port = field.NewString(table, "port")
	g.AuthUser = field.NewString(table, "auth_user")
	g.AuthPwd = field.NewString(table, "auth_pwd")
	g.NodeCode = field.NewString(table, "node_code")
	g.ClientCode = field.NewString(table, "client_code")
	g.UserCode = field.NewString(table, "user_code")
	g.Enable = field.NewInt(table, "enable")
	g.Status = field.NewInt(table, "status")
	g.ChargingType = field.NewInt(table, "charging_type")
	g.Cycle = field.NewInt(table, "cycle")
	g.Amount = field.NewField(table, "amount")
	g.Limiter = field.NewInt(table, "limiter")
	g.RLimiter = field.NewInt(table, "r_limiter")
	g.CLimiter = field.NewInt(table, "c_limiter")
	g.ExpAt = field.NewInt64(table, "exp_at")

	g.fillFieldMap()

	return g
}

func (g *gostClientProxy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gostClientProxy) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 27)
	g.fieldMap["id"] = g.Id
	g.fieldMap["code"] = g.Code
	g.fieldMap["allow_edit"] = g.AllowEdit
	g.fieldMap["allow_del"] = g.AllowDel
	g.fieldMap["version"] = g.Version
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["name"] = g.Name
	g.fieldMap["protocol"] = g.Protocol
	g.fieldMap["port"] = g.Port
	g.fieldMap["auth_user"] = g.AuthUser
	g.fieldMap["auth_pwd"] = g.AuthPwd
	g.fieldMap["node_code"] = g.NodeCode
	g.fieldMap["client_code"] = g.ClientCode
	g.fieldMap["user_code"] = g.UserCode
	g.fieldMap["enable"] = g.Enable
	g.fieldMap["status"] = g.Status
	g.fieldMap["charging_type"] = g.ChargingType
	g.fieldMap["cycle"] = g.Cycle
	g.fieldMap["amount"] = g.Amount
	g.fieldMap["limiter"] = g.Limiter
	g.fieldMap["r_limiter"] = g.RLimiter
	g.fieldMap["c_limiter"] = g.CLimiter
	g.fieldMap["exp_at"] = g.ExpAt

}

func (g gostClientProxy) clone(db *gorm.DB) gostClientProxy {
	g.gostClientProxyDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gostClientProxy) replaceDB(db *gorm.DB) gostClientProxy {
	g.gostClientProxyDo.ReplaceDB(db)
	return g
}

type gostClientProxyBelongsToNode struct {
	db *gorm.DB

	field.RelationField

	Configs struct {
		field.RelationField
		Node struct {
			field.RelationField
		}
	}
}

func (a gostClientProxyBelongsToNode) Where(conds ...field.Expr) *gostClientProxyBelongsToNode {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a gostClientProxyBelongsToNode) WithContext(ctx context.Context) *gostClientProxyBelongsToNode {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a gostClientProxyBelongsToNode) Session(session *gorm.Session) *gostClientProxyBelongsToNode {
	a.db = a.db.Session(session)
	return &a
}

func (a gostClientProxyBelongsToNode) Model(m *model.GostClientProxy) *gostClientProxyBelongsToNodeTx {
	return &gostClientProxyBelongsToNodeTx{a.db.Model(m).Association(a.Name())}
}

type gostClientProxyBelongsToNodeTx struct{ tx *gorm.Association }

func (a gostClientProxyBelongsToNodeTx) Find() (result *model.GostNode, err error) {
	return result, a.tx.Find(&result)
}

func (a gostClientProxyBelongsToNodeTx) Append(values ...*model.GostNode) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a gostClientProxyBelongsToNodeTx) Replace(values ...*model.GostNode) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a gostClientProxyBelongsToNodeTx) Delete(values ...*model.GostNode) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a gostClientProxyBelongsToNodeTx) Clear() error {
	return a.tx.Clear()
}

func (a gostClientProxyBelongsToNodeTx) Count() int64 {
	return a.tx.Count()
}

type gostClientProxyBelongsToClient struct {
	db *gorm.DB

	field.RelationField

	User struct {
		field.RelationField
		BindEmail struct {
			field.RelationField
		}
	}
}

func (a gostClientProxyBelongsToClient) Where(conds ...field.Expr) *gostClientProxyBelongsToClient {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a gostClientProxyBelongsToClient) WithContext(ctx context.Context) *gostClientProxyBelongsToClient {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a gostClientProxyBelongsToClient) Session(session *gorm.Session) *gostClientProxyBelongsToClient {
	a.db = a.db.Session(session)
	return &a
}

func (a gostClientProxyBelongsToClient) Model(m *model.GostClientProxy) *gostClientProxyBelongsToClientTx {
	return &gostClientProxyBelongsToClientTx{a.db.Model(m).Association(a.Name())}
}

type gostClientProxyBelongsToClientTx struct{ tx *gorm.Association }

func (a gostClientProxyBelongsToClientTx) Find() (result *model.GostClient, err error) {
	return result, a.tx.Find(&result)
}

func (a gostClientProxyBelongsToClientTx) Append(values ...*model.GostClient) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a gostClientProxyBelongsToClientTx) Replace(values ...*model.GostClient) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a gostClientProxyBelongsToClientTx) Delete(values ...*model.GostClient) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a gostClientProxyBelongsToClientTx) Clear() error {
	return a.tx.Clear()
}

func (a gostClientProxyBelongsToClientTx) Count() int64 {
	return a.tx.Count()
}

type gostClientProxyBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a gostClientProxyBelongsToUser) Where(conds ...field.Expr) *gostClientProxyBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a gostClientProxyBelongsToUser) WithContext(ctx context.Context) *gostClientProxyBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a gostClientProxyBelongsToUser) Session(session *gorm.Session) *gostClientProxyBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a gostClientProxyBelongsToUser) Model(m *model.GostClientProxy) *gostClientProxyBelongsToUserTx {
	return &gostClientProxyBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type gostClientProxyBelongsToUserTx struct{ tx *gorm.Association }

func (a gostClientProxyBelongsToUserTx) Find() (result *model.SystemUser, err error) {
	return result, a.tx.Find(&result)
}

func (a gostClientProxyBelongsToUserTx) Append(values ...*model.SystemUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a gostClientProxyBelongsToUserTx) Replace(values ...*model.SystemUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a gostClientProxyBelongsToUserTx) Delete(values ...*model.SystemUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a gostClientProxyBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a gostClientProxyBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type gostClientProxyDo struct{ gen.DO }

type IGostClientProxyDo interface {
	gen.SubQuery
	Debug() IGostClientProxyDo
	WithContext(ctx context.Context) IGostClientProxyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGostClientProxyDo
	WriteDB() IGostClientProxyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGostClientProxyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGostClientProxyDo
	Not(conds ...gen.Condition) IGostClientProxyDo
	Or(conds ...gen.Condition) IGostClientProxyDo
	Select(conds ...field.Expr) IGostClientProxyDo
	Where(conds ...gen.Condition) IGostClientProxyDo
	Order(conds ...field.Expr) IGostClientProxyDo
	Distinct(cols ...field.Expr) IGostClientProxyDo
	Omit(cols ...field.Expr) IGostClientProxyDo
	Join(table schema.Tabler, on ...field.Expr) IGostClientProxyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGostClientProxyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGostClientProxyDo
	Group(cols ...field.Expr) IGostClientProxyDo
	Having(conds ...gen.Condition) IGostClientProxyDo
	Limit(limit int) IGostClientProxyDo
	Offset(offset int) IGostClientProxyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGostClientProxyDo
	Unscoped() IGostClientProxyDo
	Create(values ...*model.GostClientProxy) error
	CreateInBatches(values []*model.GostClientProxy, batchSize int) error
	Save(values ...*model.GostClientProxy) error
	First() (*model.GostClientProxy, error)
	Take() (*model.GostClientProxy, error)
	Last() (*model.GostClientProxy, error)
	Find() ([]*model.GostClientProxy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostClientProxy, err error)
	FindInBatches(result *[]*model.GostClientProxy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GostClientProxy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGostClientProxyDo
	Assign(attrs ...field.AssignExpr) IGostClientProxyDo
	Joins(fields ...field.RelationField) IGostClientProxyDo
	Preload(fields ...field.RelationField) IGostClientProxyDo
	FirstOrInit() (*model.GostClientProxy, error)
	FirstOrCreate() (*model.GostClientProxy, error)
	FindByPage(offset int, limit int) (result []*model.GostClientProxy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGostClientProxyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gostClientProxyDo) Debug() IGostClientProxyDo {
	return g.withDO(g.DO.Debug())
}

func (g gostClientProxyDo) WithContext(ctx context.Context) IGostClientProxyDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gostClientProxyDo) ReadDB() IGostClientProxyDo {
	return g.Clauses(dbresolver.Read)
}

func (g gostClientProxyDo) WriteDB() IGostClientProxyDo {
	return g.Clauses(dbresolver.Write)
}

func (g gostClientProxyDo) Session(config *gorm.Session) IGostClientProxyDo {
	return g.withDO(g.DO.Session(config))
}

func (g gostClientProxyDo) Clauses(conds ...clause.Expression) IGostClientProxyDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gostClientProxyDo) Returning(value interface{}, columns ...string) IGostClientProxyDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gostClientProxyDo) Not(conds ...gen.Condition) IGostClientProxyDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gostClientProxyDo) Or(conds ...gen.Condition) IGostClientProxyDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gostClientProxyDo) Select(conds ...field.Expr) IGostClientProxyDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gostClientProxyDo) Where(conds ...gen.Condition) IGostClientProxyDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gostClientProxyDo) Order(conds ...field.Expr) IGostClientProxyDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gostClientProxyDo) Distinct(cols ...field.Expr) IGostClientProxyDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gostClientProxyDo) Omit(cols ...field.Expr) IGostClientProxyDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gostClientProxyDo) Join(table schema.Tabler, on ...field.Expr) IGostClientProxyDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gostClientProxyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGostClientProxyDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gostClientProxyDo) RightJoin(table schema.Tabler, on ...field.Expr) IGostClientProxyDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gostClientProxyDo) Group(cols ...field.Expr) IGostClientProxyDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gostClientProxyDo) Having(conds ...gen.Condition) IGostClientProxyDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gostClientProxyDo) Limit(limit int) IGostClientProxyDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gostClientProxyDo) Offset(offset int) IGostClientProxyDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gostClientProxyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGostClientProxyDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gostClientProxyDo) Unscoped() IGostClientProxyDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gostClientProxyDo) Create(values ...*model.GostClientProxy) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gostClientProxyDo) CreateInBatches(values []*model.GostClientProxy, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gostClientProxyDo) Save(values ...*model.GostClientProxy) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gostClientProxyDo) First() (*model.GostClientProxy, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientProxy), nil
	}
}

func (g gostClientProxyDo) Take() (*model.GostClientProxy, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientProxy), nil
	}
}

func (g gostClientProxyDo) Last() (*model.GostClientProxy, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientProxy), nil
	}
}

func (g gostClientProxyDo) Find() ([]*model.GostClientProxy, error) {
	result, err := g.DO.Find()
	return result.([]*model.GostClientProxy), err
}

func (g gostClientProxyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostClientProxy, err error) {
	buf := make([]*model.GostClientProxy, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gostClientProxyDo) FindInBatches(result *[]*model.GostClientProxy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gostClientProxyDo) Attrs(attrs ...field.AssignExpr) IGostClientProxyDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gostClientProxyDo) Assign(attrs ...field.AssignExpr) IGostClientProxyDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gostClientProxyDo) Joins(fields ...field.RelationField) IGostClientProxyDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gostClientProxyDo) Preload(fields ...field.RelationField) IGostClientProxyDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gostClientProxyDo) FirstOrInit() (*model.GostClientProxy, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientProxy), nil
	}
}

func (g gostClientProxyDo) FirstOrCreate() (*model.GostClientProxy, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientProxy), nil
	}
}

func (g gostClientProxyDo) FindByPage(offset int, limit int) (result []*model.GostClientProxy, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gostClientProxyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gostClientProxyDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gostClientProxyDo) Delete(models ...*model.GostClientProxy) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gostClientProxyDo) withDO(do gen.Dao) *gostClientProxyDo {
	g.DO = *do.(*gen.DO)
	return g
}
