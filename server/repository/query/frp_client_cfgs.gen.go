// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/model"
)

func newFrpClientCfg(db *gorm.DB, opts ...gen.DOOption) frpClientCfg {
	_frpClientCfg := frpClientCfg{}

	_frpClientCfg.frpClientCfgDo.UseDB(db, opts...)
	_frpClientCfg.frpClientCfgDo.UseModel(&model.FrpClientCfg{})

	tableName := _frpClientCfg.frpClientCfgDo.TableName()
	_frpClientCfg.ALL = field.NewAsterisk(tableName)
	_frpClientCfg.Id = field.NewInt(tableName, "id")
	_frpClientCfg.Code = field.NewString(tableName, "code")
	_frpClientCfg.AllowEdit = field.NewInt(tableName, "allow_edit")
	_frpClientCfg.AllowDel = field.NewInt(tableName, "allow_del")
	_frpClientCfg.Version = field.NewInt64(tableName, "version")
	_frpClientCfg.CreatedAt = field.NewTime(tableName, "created_at")
	_frpClientCfg.UpdatedAt = field.NewTime(tableName, "updated_at")
	_frpClientCfg.Name = field.NewString(tableName, "name")
	_frpClientCfg.Enable = field.NewInt(tableName, "enable")
	_frpClientCfg.Content = field.NewString(tableName, "content")
	_frpClientCfg.ContentType = field.NewString(tableName, "content_type")
	_frpClientCfg.ClientCode = field.NewString(tableName, "client_code")
	_frpClientCfg.UserCode = field.NewString(tableName, "user_code")
	_frpClientCfg.Client = frpClientCfgBelongsToClient{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Client", "model.GostClient"),
		User: struct {
			field.RelationField
			BindEmail struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Client.User", "model.SystemUser"),
			BindEmail: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Client.User.BindEmail", "model.SystemUserEmail"),
			},
		},
	}

	_frpClientCfg.User = frpClientCfgBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.SystemUser"),
	}

	_frpClientCfg.fillFieldMap()

	return _frpClientCfg
}

type frpClientCfg struct {
	frpClientCfgDo

	ALL         field.Asterisk
	Id          field.Int
	Code        field.String
	AllowEdit   field.Int
	AllowDel    field.Int
	Version     field.Int64
	CreatedAt   field.Time
	UpdatedAt   field.Time
	Name        field.String
	Enable      field.Int
	Content     field.String
	ContentType field.String
	ClientCode  field.String
	UserCode    field.String
	Client      frpClientCfgBelongsToClient

	User frpClientCfgBelongsToUser

	fieldMap map[string]field.Expr
}

func (f frpClientCfg) Table(newTableName string) *frpClientCfg {
	f.frpClientCfgDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f frpClientCfg) As(alias string) *frpClientCfg {
	f.frpClientCfgDo.DO = *(f.frpClientCfgDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *frpClientCfg) updateTableName(table string) *frpClientCfg {
	f.ALL = field.NewAsterisk(table)
	f.Id = field.NewInt(table, "id")
	f.Code = field.NewString(table, "code")
	f.AllowEdit = field.NewInt(table, "allow_edit")
	f.AllowDel = field.NewInt(table, "allow_del")
	f.Version = field.NewInt64(table, "version")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.Name = field.NewString(table, "name")
	f.Enable = field.NewInt(table, "enable")
	f.Content = field.NewString(table, "content")
	f.ContentType = field.NewString(table, "content_type")
	f.ClientCode = field.NewString(table, "client_code")
	f.UserCode = field.NewString(table, "user_code")

	f.fillFieldMap()

	return f
}

func (f *frpClientCfg) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *frpClientCfg) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 15)
	f.fieldMap["id"] = f.Id
	f.fieldMap["code"] = f.Code
	f.fieldMap["allow_edit"] = f.AllowEdit
	f.fieldMap["allow_del"] = f.AllowDel
	f.fieldMap["version"] = f.Version
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["name"] = f.Name
	f.fieldMap["enable"] = f.Enable
	f.fieldMap["content"] = f.Content
	f.fieldMap["content_type"] = f.ContentType
	f.fieldMap["client_code"] = f.ClientCode
	f.fieldMap["user_code"] = f.UserCode

}

func (f frpClientCfg) clone(db *gorm.DB) frpClientCfg {
	f.frpClientCfgDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f frpClientCfg) replaceDB(db *gorm.DB) frpClientCfg {
	f.frpClientCfgDo.ReplaceDB(db)
	return f
}

type frpClientCfgBelongsToClient struct {
	db *gorm.DB

	field.RelationField

	User struct {
		field.RelationField
		BindEmail struct {
			field.RelationField
		}
	}
}

func (a frpClientCfgBelongsToClient) Where(conds ...field.Expr) *frpClientCfgBelongsToClient {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a frpClientCfgBelongsToClient) WithContext(ctx context.Context) *frpClientCfgBelongsToClient {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a frpClientCfgBelongsToClient) Session(session *gorm.Session) *frpClientCfgBelongsToClient {
	a.db = a.db.Session(session)
	return &a
}

func (a frpClientCfgBelongsToClient) Model(m *model.FrpClientCfg) *frpClientCfgBelongsToClientTx {
	return &frpClientCfgBelongsToClientTx{a.db.Model(m).Association(a.Name())}
}

type frpClientCfgBelongsToClientTx struct{ tx *gorm.Association }

func (a frpClientCfgBelongsToClientTx) Find() (result *model.GostClient, err error) {
	return result, a.tx.Find(&result)
}

func (a frpClientCfgBelongsToClientTx) Append(values ...*model.GostClient) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a frpClientCfgBelongsToClientTx) Replace(values ...*model.GostClient) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a frpClientCfgBelongsToClientTx) Delete(values ...*model.GostClient) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a frpClientCfgBelongsToClientTx) Clear() error {
	return a.tx.Clear()
}

func (a frpClientCfgBelongsToClientTx) Count() int64 {
	return a.tx.Count()
}

type frpClientCfgBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a frpClientCfgBelongsToUser) Where(conds ...field.Expr) *frpClientCfgBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a frpClientCfgBelongsToUser) WithContext(ctx context.Context) *frpClientCfgBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a frpClientCfgBelongsToUser) Session(session *gorm.Session) *frpClientCfgBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a frpClientCfgBelongsToUser) Model(m *model.FrpClientCfg) *frpClientCfgBelongsToUserTx {
	return &frpClientCfgBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type frpClientCfgBelongsToUserTx struct{ tx *gorm.Association }

func (a frpClientCfgBelongsToUserTx) Find() (result *model.SystemUser, err error) {
	return result, a.tx.Find(&result)
}

func (a frpClientCfgBelongsToUserTx) Append(values ...*model.SystemUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a frpClientCfgBelongsToUserTx) Replace(values ...*model.SystemUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a frpClientCfgBelongsToUserTx) Delete(values ...*model.SystemUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a frpClientCfgBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a frpClientCfgBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type frpClientCfgDo struct{ gen.DO }

type IFrpClientCfgDo interface {
	gen.SubQuery
	Debug() IFrpClientCfgDo
	WithContext(ctx context.Context) IFrpClientCfgDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFrpClientCfgDo
	WriteDB() IFrpClientCfgDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFrpClientCfgDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFrpClientCfgDo
	Not(conds ...gen.Condition) IFrpClientCfgDo
	Or(conds ...gen.Condition) IFrpClientCfgDo
	Select(conds ...field.Expr) IFrpClientCfgDo
	Where(conds ...gen.Condition) IFrpClientCfgDo
	Order(conds ...field.Expr) IFrpClientCfgDo
	Distinct(cols ...field.Expr) IFrpClientCfgDo
	Omit(cols ...field.Expr) IFrpClientCfgDo
	Join(table schema.Tabler, on ...field.Expr) IFrpClientCfgDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFrpClientCfgDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFrpClientCfgDo
	Group(cols ...field.Expr) IFrpClientCfgDo
	Having(conds ...gen.Condition) IFrpClientCfgDo
	Limit(limit int) IFrpClientCfgDo
	Offset(offset int) IFrpClientCfgDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFrpClientCfgDo
	Unscoped() IFrpClientCfgDo
	Create(values ...*model.FrpClientCfg) error
	CreateInBatches(values []*model.FrpClientCfg, batchSize int) error
	Save(values ...*model.FrpClientCfg) error
	First() (*model.FrpClientCfg, error)
	Take() (*model.FrpClientCfg, error)
	Last() (*model.FrpClientCfg, error)
	Find() ([]*model.FrpClientCfg, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FrpClientCfg, err error)
	FindInBatches(result *[]*model.FrpClientCfg, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FrpClientCfg) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFrpClientCfgDo
	Assign(attrs ...field.AssignExpr) IFrpClientCfgDo
	Joins(fields ...field.RelationField) IFrpClientCfgDo
	Preload(fields ...field.RelationField) IFrpClientCfgDo
	FirstOrInit() (*model.FrpClientCfg, error)
	FirstOrCreate() (*model.FrpClientCfg, error)
	FindByPage(offset int, limit int) (result []*model.FrpClientCfg, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFrpClientCfgDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f frpClientCfgDo) Debug() IFrpClientCfgDo {
	return f.withDO(f.DO.Debug())
}

func (f frpClientCfgDo) WithContext(ctx context.Context) IFrpClientCfgDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f frpClientCfgDo) ReadDB() IFrpClientCfgDo {
	return f.Clauses(dbresolver.Read)
}

func (f frpClientCfgDo) WriteDB() IFrpClientCfgDo {
	return f.Clauses(dbresolver.Write)
}

func (f frpClientCfgDo) Session(config *gorm.Session) IFrpClientCfgDo {
	return f.withDO(f.DO.Session(config))
}

func (f frpClientCfgDo) Clauses(conds ...clause.Expression) IFrpClientCfgDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f frpClientCfgDo) Returning(value interface{}, columns ...string) IFrpClientCfgDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f frpClientCfgDo) Not(conds ...gen.Condition) IFrpClientCfgDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f frpClientCfgDo) Or(conds ...gen.Condition) IFrpClientCfgDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f frpClientCfgDo) Select(conds ...field.Expr) IFrpClientCfgDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f frpClientCfgDo) Where(conds ...gen.Condition) IFrpClientCfgDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f frpClientCfgDo) Order(conds ...field.Expr) IFrpClientCfgDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f frpClientCfgDo) Distinct(cols ...field.Expr) IFrpClientCfgDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f frpClientCfgDo) Omit(cols ...field.Expr) IFrpClientCfgDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f frpClientCfgDo) Join(table schema.Tabler, on ...field.Expr) IFrpClientCfgDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f frpClientCfgDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFrpClientCfgDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f frpClientCfgDo) RightJoin(table schema.Tabler, on ...field.Expr) IFrpClientCfgDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f frpClientCfgDo) Group(cols ...field.Expr) IFrpClientCfgDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f frpClientCfgDo) Having(conds ...gen.Condition) IFrpClientCfgDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f frpClientCfgDo) Limit(limit int) IFrpClientCfgDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f frpClientCfgDo) Offset(offset int) IFrpClientCfgDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f frpClientCfgDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFrpClientCfgDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f frpClientCfgDo) Unscoped() IFrpClientCfgDo {
	return f.withDO(f.DO.Unscoped())
}

func (f frpClientCfgDo) Create(values ...*model.FrpClientCfg) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f frpClientCfgDo) CreateInBatches(values []*model.FrpClientCfg, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f frpClientCfgDo) Save(values ...*model.FrpClientCfg) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f frpClientCfgDo) First() (*model.FrpClientCfg, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FrpClientCfg), nil
	}
}

func (f frpClientCfgDo) Take() (*model.FrpClientCfg, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FrpClientCfg), nil
	}
}

func (f frpClientCfgDo) Last() (*model.FrpClientCfg, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FrpClientCfg), nil
	}
}

func (f frpClientCfgDo) Find() ([]*model.FrpClientCfg, error) {
	result, err := f.DO.Find()
	return result.([]*model.FrpClientCfg), err
}

func (f frpClientCfgDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FrpClientCfg, err error) {
	buf := make([]*model.FrpClientCfg, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f frpClientCfgDo) FindInBatches(result *[]*model.FrpClientCfg, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f frpClientCfgDo) Attrs(attrs ...field.AssignExpr) IFrpClientCfgDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f frpClientCfgDo) Assign(attrs ...field.AssignExpr) IFrpClientCfgDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f frpClientCfgDo) Joins(fields ...field.RelationField) IFrpClientCfgDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f frpClientCfgDo) Preload(fields ...field.RelationField) IFrpClientCfgDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f frpClientCfgDo) FirstOrInit() (*model.FrpClientCfg, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FrpClientCfg), nil
	}
}

func (f frpClientCfgDo) FirstOrCreate() (*model.FrpClientCfg, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FrpClientCfg), nil
	}
}

func (f frpClientCfgDo) FindByPage(offset int, limit int) (result []*model.FrpClientCfg, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f frpClientCfgDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f frpClientCfgDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f frpClientCfgDo) Delete(models ...*model.FrpClientCfg) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *frpClientCfgDo) withDO(do gen.Dao) *frpClientCfgDo {
	f.DO = *do.(*gen.DO)
	return f
}
