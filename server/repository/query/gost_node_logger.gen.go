// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/model"
)

func newGostNodeLogger(db *gorm.DB, opts ...gen.DOOption) gostNodeLogger {
	_gostNodeLogger := gostNodeLogger{}

	_gostNodeLogger.gostNodeLoggerDo.UseDB(db, opts...)
	_gostNodeLogger.gostNodeLoggerDo.UseModel(&model.GostNodeLogger{})

	tableName := _gostNodeLogger.gostNodeLoggerDo.TableName()
	_gostNodeLogger.ALL = field.NewAsterisk(tableName)
	_gostNodeLogger.Id = field.NewInt(tableName, "id")
	_gostNodeLogger.Level = field.NewString(tableName, "level")
	_gostNodeLogger.NodeCode = field.NewString(tableName, "node_code")
	_gostNodeLogger.Content = field.NewString(tableName, "content")
	_gostNodeLogger.CreatedAt = field.NewInt64(tableName, "created_at")

	_gostNodeLogger.fillFieldMap()

	return _gostNodeLogger
}

type gostNodeLogger struct {
	gostNodeLoggerDo

	ALL       field.Asterisk
	Id        field.Int
	Level     field.String
	NodeCode  field.String
	Content   field.String
	CreatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (g gostNodeLogger) Table(newTableName string) *gostNodeLogger {
	g.gostNodeLoggerDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gostNodeLogger) As(alias string) *gostNodeLogger {
	g.gostNodeLoggerDo.DO = *(g.gostNodeLoggerDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gostNodeLogger) updateTableName(table string) *gostNodeLogger {
	g.ALL = field.NewAsterisk(table)
	g.Id = field.NewInt(table, "id")
	g.Level = field.NewString(table, "level")
	g.NodeCode = field.NewString(table, "node_code")
	g.Content = field.NewString(table, "content")
	g.CreatedAt = field.NewInt64(table, "created_at")

	g.fillFieldMap()

	return g
}

func (g *gostNodeLogger) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gostNodeLogger) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 5)
	g.fieldMap["id"] = g.Id
	g.fieldMap["level"] = g.Level
	g.fieldMap["node_code"] = g.NodeCode
	g.fieldMap["content"] = g.Content
	g.fieldMap["created_at"] = g.CreatedAt
}

func (g gostNodeLogger) clone(db *gorm.DB) gostNodeLogger {
	g.gostNodeLoggerDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gostNodeLogger) replaceDB(db *gorm.DB) gostNodeLogger {
	g.gostNodeLoggerDo.ReplaceDB(db)
	return g
}

type gostNodeLoggerDo struct{ gen.DO }

type IGostNodeLoggerDo interface {
	gen.SubQuery
	Debug() IGostNodeLoggerDo
	WithContext(ctx context.Context) IGostNodeLoggerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGostNodeLoggerDo
	WriteDB() IGostNodeLoggerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGostNodeLoggerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGostNodeLoggerDo
	Not(conds ...gen.Condition) IGostNodeLoggerDo
	Or(conds ...gen.Condition) IGostNodeLoggerDo
	Select(conds ...field.Expr) IGostNodeLoggerDo
	Where(conds ...gen.Condition) IGostNodeLoggerDo
	Order(conds ...field.Expr) IGostNodeLoggerDo
	Distinct(cols ...field.Expr) IGostNodeLoggerDo
	Omit(cols ...field.Expr) IGostNodeLoggerDo
	Join(table schema.Tabler, on ...field.Expr) IGostNodeLoggerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGostNodeLoggerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGostNodeLoggerDo
	Group(cols ...field.Expr) IGostNodeLoggerDo
	Having(conds ...gen.Condition) IGostNodeLoggerDo
	Limit(limit int) IGostNodeLoggerDo
	Offset(offset int) IGostNodeLoggerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGostNodeLoggerDo
	Unscoped() IGostNodeLoggerDo
	Create(values ...*model.GostNodeLogger) error
	CreateInBatches(values []*model.GostNodeLogger, batchSize int) error
	Save(values ...*model.GostNodeLogger) error
	First() (*model.GostNodeLogger, error)
	Take() (*model.GostNodeLogger, error)
	Last() (*model.GostNodeLogger, error)
	Find() ([]*model.GostNodeLogger, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostNodeLogger, err error)
	FindInBatches(result *[]*model.GostNodeLogger, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GostNodeLogger) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGostNodeLoggerDo
	Assign(attrs ...field.AssignExpr) IGostNodeLoggerDo
	Joins(fields ...field.RelationField) IGostNodeLoggerDo
	Preload(fields ...field.RelationField) IGostNodeLoggerDo
	FirstOrInit() (*model.GostNodeLogger, error)
	FirstOrCreate() (*model.GostNodeLogger, error)
	FindByPage(offset int, limit int) (result []*model.GostNodeLogger, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGostNodeLoggerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gostNodeLoggerDo) Debug() IGostNodeLoggerDo {
	return g.withDO(g.DO.Debug())
}

func (g gostNodeLoggerDo) WithContext(ctx context.Context) IGostNodeLoggerDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gostNodeLoggerDo) ReadDB() IGostNodeLoggerDo {
	return g.Clauses(dbresolver.Read)
}

func (g gostNodeLoggerDo) WriteDB() IGostNodeLoggerDo {
	return g.Clauses(dbresolver.Write)
}

func (g gostNodeLoggerDo) Session(config *gorm.Session) IGostNodeLoggerDo {
	return g.withDO(g.DO.Session(config))
}

func (g gostNodeLoggerDo) Clauses(conds ...clause.Expression) IGostNodeLoggerDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gostNodeLoggerDo) Returning(value interface{}, columns ...string) IGostNodeLoggerDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gostNodeLoggerDo) Not(conds ...gen.Condition) IGostNodeLoggerDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gostNodeLoggerDo) Or(conds ...gen.Condition) IGostNodeLoggerDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gostNodeLoggerDo) Select(conds ...field.Expr) IGostNodeLoggerDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gostNodeLoggerDo) Where(conds ...gen.Condition) IGostNodeLoggerDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gostNodeLoggerDo) Order(conds ...field.Expr) IGostNodeLoggerDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gostNodeLoggerDo) Distinct(cols ...field.Expr) IGostNodeLoggerDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gostNodeLoggerDo) Omit(cols ...field.Expr) IGostNodeLoggerDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gostNodeLoggerDo) Join(table schema.Tabler, on ...field.Expr) IGostNodeLoggerDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gostNodeLoggerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGostNodeLoggerDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gostNodeLoggerDo) RightJoin(table schema.Tabler, on ...field.Expr) IGostNodeLoggerDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gostNodeLoggerDo) Group(cols ...field.Expr) IGostNodeLoggerDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gostNodeLoggerDo) Having(conds ...gen.Condition) IGostNodeLoggerDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gostNodeLoggerDo) Limit(limit int) IGostNodeLoggerDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gostNodeLoggerDo) Offset(offset int) IGostNodeLoggerDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gostNodeLoggerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGostNodeLoggerDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gostNodeLoggerDo) Unscoped() IGostNodeLoggerDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gostNodeLoggerDo) Create(values ...*model.GostNodeLogger) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gostNodeLoggerDo) CreateInBatches(values []*model.GostNodeLogger, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gostNodeLoggerDo) Save(values ...*model.GostNodeLogger) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gostNodeLoggerDo) First() (*model.GostNodeLogger, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodeLogger), nil
	}
}

func (g gostNodeLoggerDo) Take() (*model.GostNodeLogger, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodeLogger), nil
	}
}

func (g gostNodeLoggerDo) Last() (*model.GostNodeLogger, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodeLogger), nil
	}
}

func (g gostNodeLoggerDo) Find() ([]*model.GostNodeLogger, error) {
	result, err := g.DO.Find()
	return result.([]*model.GostNodeLogger), err
}

func (g gostNodeLoggerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostNodeLogger, err error) {
	buf := make([]*model.GostNodeLogger, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gostNodeLoggerDo) FindInBatches(result *[]*model.GostNodeLogger, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gostNodeLoggerDo) Attrs(attrs ...field.AssignExpr) IGostNodeLoggerDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gostNodeLoggerDo) Assign(attrs ...field.AssignExpr) IGostNodeLoggerDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gostNodeLoggerDo) Joins(fields ...field.RelationField) IGostNodeLoggerDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gostNodeLoggerDo) Preload(fields ...field.RelationField) IGostNodeLoggerDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gostNodeLoggerDo) FirstOrInit() (*model.GostNodeLogger, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodeLogger), nil
	}
}

func (g gostNodeLoggerDo) FirstOrCreate() (*model.GostNodeLogger, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodeLogger), nil
	}
}

func (g gostNodeLoggerDo) FindByPage(offset int, limit int) (result []*model.GostNodeLogger, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gostNodeLoggerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gostNodeLoggerDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gostNodeLoggerDo) Delete(models ...*model.GostNodeLogger) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gostNodeLoggerDo) withDO(do gen.Dao) *gostNodeLoggerDo {
	g.DO = *do.(*gen.DO)
	return g
}
