// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/model"
)

func newGostNodePort(db *gorm.DB, opts ...gen.DOOption) gostNodePort {
	_gostNodePort := gostNodePort{}

	_gostNodePort.gostNodePortDo.UseDB(db, opts...)
	_gostNodePort.gostNodePortDo.UseModel(&model.GostNodePort{})

	tableName := _gostNodePort.gostNodePortDo.TableName()
	_gostNodePort.ALL = field.NewAsterisk(tableName)
	_gostNodePort.Id = field.NewInt(tableName, "id")
	_gostNodePort.Code = field.NewString(tableName, "code")
	_gostNodePort.AllowEdit = field.NewInt(tableName, "allow_edit")
	_gostNodePort.AllowDel = field.NewInt(tableName, "allow_del")
	_gostNodePort.CreatedAt = field.NewTime(tableName, "created_at")
	_gostNodePort.UpdatedAt = field.NewTime(tableName, "updated_at")
	_gostNodePort.Port = field.NewString(tableName, "port")
	_gostNodePort.NodeCode = field.NewString(tableName, "node_code")

	_gostNodePort.fillFieldMap()

	return _gostNodePort
}

type gostNodePort struct {
	gostNodePortDo

	ALL       field.Asterisk
	Id        field.Int
	Code      field.String
	AllowEdit field.Int
	AllowDel  field.Int
	CreatedAt field.Time
	UpdatedAt field.Time
	Port      field.String
	NodeCode  field.String

	fieldMap map[string]field.Expr
}

func (g gostNodePort) Table(newTableName string) *gostNodePort {
	g.gostNodePortDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gostNodePort) As(alias string) *gostNodePort {
	g.gostNodePortDo.DO = *(g.gostNodePortDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gostNodePort) updateTableName(table string) *gostNodePort {
	g.ALL = field.NewAsterisk(table)
	g.Id = field.NewInt(table, "id")
	g.Code = field.NewString(table, "code")
	g.AllowEdit = field.NewInt(table, "allow_edit")
	g.AllowDel = field.NewInt(table, "allow_del")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.Port = field.NewString(table, "port")
	g.NodeCode = field.NewString(table, "node_code")

	g.fillFieldMap()

	return g
}

func (g *gostNodePort) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gostNodePort) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 8)
	g.fieldMap["id"] = g.Id
	g.fieldMap["code"] = g.Code
	g.fieldMap["allow_edit"] = g.AllowEdit
	g.fieldMap["allow_del"] = g.AllowDel
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["port"] = g.Port
	g.fieldMap["node_code"] = g.NodeCode
}

func (g gostNodePort) clone(db *gorm.DB) gostNodePort {
	g.gostNodePortDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gostNodePort) replaceDB(db *gorm.DB) gostNodePort {
	g.gostNodePortDo.ReplaceDB(db)
	return g
}

type gostNodePortDo struct{ gen.DO }

type IGostNodePortDo interface {
	gen.SubQuery
	Debug() IGostNodePortDo
	WithContext(ctx context.Context) IGostNodePortDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGostNodePortDo
	WriteDB() IGostNodePortDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGostNodePortDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGostNodePortDo
	Not(conds ...gen.Condition) IGostNodePortDo
	Or(conds ...gen.Condition) IGostNodePortDo
	Select(conds ...field.Expr) IGostNodePortDo
	Where(conds ...gen.Condition) IGostNodePortDo
	Order(conds ...field.Expr) IGostNodePortDo
	Distinct(cols ...field.Expr) IGostNodePortDo
	Omit(cols ...field.Expr) IGostNodePortDo
	Join(table schema.Tabler, on ...field.Expr) IGostNodePortDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGostNodePortDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGostNodePortDo
	Group(cols ...field.Expr) IGostNodePortDo
	Having(conds ...gen.Condition) IGostNodePortDo
	Limit(limit int) IGostNodePortDo
	Offset(offset int) IGostNodePortDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGostNodePortDo
	Unscoped() IGostNodePortDo
	Create(values ...*model.GostNodePort) error
	CreateInBatches(values []*model.GostNodePort, batchSize int) error
	Save(values ...*model.GostNodePort) error
	First() (*model.GostNodePort, error)
	Take() (*model.GostNodePort, error)
	Last() (*model.GostNodePort, error)
	Find() ([]*model.GostNodePort, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostNodePort, err error)
	FindInBatches(result *[]*model.GostNodePort, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GostNodePort) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGostNodePortDo
	Assign(attrs ...field.AssignExpr) IGostNodePortDo
	Joins(fields ...field.RelationField) IGostNodePortDo
	Preload(fields ...field.RelationField) IGostNodePortDo
	FirstOrInit() (*model.GostNodePort, error)
	FirstOrCreate() (*model.GostNodePort, error)
	FindByPage(offset int, limit int) (result []*model.GostNodePort, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGostNodePortDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gostNodePortDo) Debug() IGostNodePortDo {
	return g.withDO(g.DO.Debug())
}

func (g gostNodePortDo) WithContext(ctx context.Context) IGostNodePortDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gostNodePortDo) ReadDB() IGostNodePortDo {
	return g.Clauses(dbresolver.Read)
}

func (g gostNodePortDo) WriteDB() IGostNodePortDo {
	return g.Clauses(dbresolver.Write)
}

func (g gostNodePortDo) Session(config *gorm.Session) IGostNodePortDo {
	return g.withDO(g.DO.Session(config))
}

func (g gostNodePortDo) Clauses(conds ...clause.Expression) IGostNodePortDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gostNodePortDo) Returning(value interface{}, columns ...string) IGostNodePortDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gostNodePortDo) Not(conds ...gen.Condition) IGostNodePortDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gostNodePortDo) Or(conds ...gen.Condition) IGostNodePortDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gostNodePortDo) Select(conds ...field.Expr) IGostNodePortDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gostNodePortDo) Where(conds ...gen.Condition) IGostNodePortDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gostNodePortDo) Order(conds ...field.Expr) IGostNodePortDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gostNodePortDo) Distinct(cols ...field.Expr) IGostNodePortDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gostNodePortDo) Omit(cols ...field.Expr) IGostNodePortDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gostNodePortDo) Join(table schema.Tabler, on ...field.Expr) IGostNodePortDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gostNodePortDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGostNodePortDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gostNodePortDo) RightJoin(table schema.Tabler, on ...field.Expr) IGostNodePortDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gostNodePortDo) Group(cols ...field.Expr) IGostNodePortDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gostNodePortDo) Having(conds ...gen.Condition) IGostNodePortDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gostNodePortDo) Limit(limit int) IGostNodePortDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gostNodePortDo) Offset(offset int) IGostNodePortDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gostNodePortDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGostNodePortDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gostNodePortDo) Unscoped() IGostNodePortDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gostNodePortDo) Create(values ...*model.GostNodePort) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gostNodePortDo) CreateInBatches(values []*model.GostNodePort, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gostNodePortDo) Save(values ...*model.GostNodePort) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gostNodePortDo) First() (*model.GostNodePort, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodePort), nil
	}
}

func (g gostNodePortDo) Take() (*model.GostNodePort, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodePort), nil
	}
}

func (g gostNodePortDo) Last() (*model.GostNodePort, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodePort), nil
	}
}

func (g gostNodePortDo) Find() ([]*model.GostNodePort, error) {
	result, err := g.DO.Find()
	return result.([]*model.GostNodePort), err
}

func (g gostNodePortDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostNodePort, err error) {
	buf := make([]*model.GostNodePort, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gostNodePortDo) FindInBatches(result *[]*model.GostNodePort, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gostNodePortDo) Attrs(attrs ...field.AssignExpr) IGostNodePortDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gostNodePortDo) Assign(attrs ...field.AssignExpr) IGostNodePortDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gostNodePortDo) Joins(fields ...field.RelationField) IGostNodePortDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gostNodePortDo) Preload(fields ...field.RelationField) IGostNodePortDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gostNodePortDo) FirstOrInit() (*model.GostNodePort, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodePort), nil
	}
}

func (g gostNodePortDo) FirstOrCreate() (*model.GostNodePort, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodePort), nil
	}
}

func (g gostNodePortDo) FindByPage(offset int, limit int) (result []*model.GostNodePort, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gostNodePortDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gostNodePortDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gostNodePortDo) Delete(models ...*model.GostNodePort) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gostNodePortDo) withDO(do gen.Dao) *gostNodePortDo {
	g.DO = *do.(*gen.DO)
	return g
}
