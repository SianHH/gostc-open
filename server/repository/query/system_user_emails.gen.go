// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/model"
)

func newSystemUserEmail(db *gorm.DB, opts ...gen.DOOption) systemUserEmail {
	_systemUserEmail := systemUserEmail{}

	_systemUserEmail.systemUserEmailDo.UseDB(db, opts...)
	_systemUserEmail.systemUserEmailDo.UseModel(&model.SystemUserEmail{})

	tableName := _systemUserEmail.systemUserEmailDo.TableName()
	_systemUserEmail.ALL = field.NewAsterisk(tableName)
	_systemUserEmail.Id = field.NewInt(tableName, "id")
	_systemUserEmail.Code = field.NewString(tableName, "code")
	_systemUserEmail.AllowEdit = field.NewInt(tableName, "allow_edit")
	_systemUserEmail.AllowDel = field.NewInt(tableName, "allow_del")
	_systemUserEmail.Version = field.NewInt64(tableName, "version")
	_systemUserEmail.CreatedAt = field.NewTime(tableName, "created_at")
	_systemUserEmail.UpdatedAt = field.NewTime(tableName, "updated_at")
	_systemUserEmail.Email = field.NewString(tableName, "email")
	_systemUserEmail.UserCode = field.NewString(tableName, "user_code")

	_systemUserEmail.fillFieldMap()

	return _systemUserEmail
}

type systemUserEmail struct {
	systemUserEmailDo

	ALL       field.Asterisk
	Id        field.Int
	Code      field.String
	AllowEdit field.Int
	AllowDel  field.Int
	Version   field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	Email     field.String
	UserCode  field.String

	fieldMap map[string]field.Expr
}

func (s systemUserEmail) Table(newTableName string) *systemUserEmail {
	s.systemUserEmailDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemUserEmail) As(alias string) *systemUserEmail {
	s.systemUserEmailDo.DO = *(s.systemUserEmailDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemUserEmail) updateTableName(table string) *systemUserEmail {
	s.ALL = field.NewAsterisk(table)
	s.Id = field.NewInt(table, "id")
	s.Code = field.NewString(table, "code")
	s.AllowEdit = field.NewInt(table, "allow_edit")
	s.AllowDel = field.NewInt(table, "allow_del")
	s.Version = field.NewInt64(table, "version")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.Email = field.NewString(table, "email")
	s.UserCode = field.NewString(table, "user_code")

	s.fillFieldMap()

	return s
}

func (s *systemUserEmail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemUserEmail) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.Id
	s.fieldMap["code"] = s.Code
	s.fieldMap["allow_edit"] = s.AllowEdit
	s.fieldMap["allow_del"] = s.AllowDel
	s.fieldMap["version"] = s.Version
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["email"] = s.Email
	s.fieldMap["user_code"] = s.UserCode
}

func (s systemUserEmail) clone(db *gorm.DB) systemUserEmail {
	s.systemUserEmailDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s systemUserEmail) replaceDB(db *gorm.DB) systemUserEmail {
	s.systemUserEmailDo.ReplaceDB(db)
	return s
}

type systemUserEmailDo struct{ gen.DO }

type ISystemUserEmailDo interface {
	gen.SubQuery
	Debug() ISystemUserEmailDo
	WithContext(ctx context.Context) ISystemUserEmailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISystemUserEmailDo
	WriteDB() ISystemUserEmailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISystemUserEmailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemUserEmailDo
	Not(conds ...gen.Condition) ISystemUserEmailDo
	Or(conds ...gen.Condition) ISystemUserEmailDo
	Select(conds ...field.Expr) ISystemUserEmailDo
	Where(conds ...gen.Condition) ISystemUserEmailDo
	Order(conds ...field.Expr) ISystemUserEmailDo
	Distinct(cols ...field.Expr) ISystemUserEmailDo
	Omit(cols ...field.Expr) ISystemUserEmailDo
	Join(table schema.Tabler, on ...field.Expr) ISystemUserEmailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemUserEmailDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemUserEmailDo
	Group(cols ...field.Expr) ISystemUserEmailDo
	Having(conds ...gen.Condition) ISystemUserEmailDo
	Limit(limit int) ISystemUserEmailDo
	Offset(offset int) ISystemUserEmailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemUserEmailDo
	Unscoped() ISystemUserEmailDo
	Create(values ...*model.SystemUserEmail) error
	CreateInBatches(values []*model.SystemUserEmail, batchSize int) error
	Save(values ...*model.SystemUserEmail) error
	First() (*model.SystemUserEmail, error)
	Take() (*model.SystemUserEmail, error)
	Last() (*model.SystemUserEmail, error)
	Find() ([]*model.SystemUserEmail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemUserEmail, err error)
	FindInBatches(result *[]*model.SystemUserEmail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemUserEmail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemUserEmailDo
	Assign(attrs ...field.AssignExpr) ISystemUserEmailDo
	Joins(fields ...field.RelationField) ISystemUserEmailDo
	Preload(fields ...field.RelationField) ISystemUserEmailDo
	FirstOrInit() (*model.SystemUserEmail, error)
	FirstOrCreate() (*model.SystemUserEmail, error)
	FindByPage(offset int, limit int) (result []*model.SystemUserEmail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemUserEmailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemUserEmailDo) Debug() ISystemUserEmailDo {
	return s.withDO(s.DO.Debug())
}

func (s systemUserEmailDo) WithContext(ctx context.Context) ISystemUserEmailDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemUserEmailDo) ReadDB() ISystemUserEmailDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemUserEmailDo) WriteDB() ISystemUserEmailDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemUserEmailDo) Session(config *gorm.Session) ISystemUserEmailDo {
	return s.withDO(s.DO.Session(config))
}

func (s systemUserEmailDo) Clauses(conds ...clause.Expression) ISystemUserEmailDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemUserEmailDo) Returning(value interface{}, columns ...string) ISystemUserEmailDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemUserEmailDo) Not(conds ...gen.Condition) ISystemUserEmailDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemUserEmailDo) Or(conds ...gen.Condition) ISystemUserEmailDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemUserEmailDo) Select(conds ...field.Expr) ISystemUserEmailDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemUserEmailDo) Where(conds ...gen.Condition) ISystemUserEmailDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemUserEmailDo) Order(conds ...field.Expr) ISystemUserEmailDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemUserEmailDo) Distinct(cols ...field.Expr) ISystemUserEmailDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemUserEmailDo) Omit(cols ...field.Expr) ISystemUserEmailDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemUserEmailDo) Join(table schema.Tabler, on ...field.Expr) ISystemUserEmailDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemUserEmailDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemUserEmailDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemUserEmailDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemUserEmailDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemUserEmailDo) Group(cols ...field.Expr) ISystemUserEmailDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemUserEmailDo) Having(conds ...gen.Condition) ISystemUserEmailDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemUserEmailDo) Limit(limit int) ISystemUserEmailDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemUserEmailDo) Offset(offset int) ISystemUserEmailDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemUserEmailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemUserEmailDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemUserEmailDo) Unscoped() ISystemUserEmailDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemUserEmailDo) Create(values ...*model.SystemUserEmail) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemUserEmailDo) CreateInBatches(values []*model.SystemUserEmail, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemUserEmailDo) Save(values ...*model.SystemUserEmail) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemUserEmailDo) First() (*model.SystemUserEmail, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserEmail), nil
	}
}

func (s systemUserEmailDo) Take() (*model.SystemUserEmail, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserEmail), nil
	}
}

func (s systemUserEmailDo) Last() (*model.SystemUserEmail, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserEmail), nil
	}
}

func (s systemUserEmailDo) Find() ([]*model.SystemUserEmail, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemUserEmail), err
}

func (s systemUserEmailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemUserEmail, err error) {
	buf := make([]*model.SystemUserEmail, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemUserEmailDo) FindInBatches(result *[]*model.SystemUserEmail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemUserEmailDo) Attrs(attrs ...field.AssignExpr) ISystemUserEmailDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemUserEmailDo) Assign(attrs ...field.AssignExpr) ISystemUserEmailDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemUserEmailDo) Joins(fields ...field.RelationField) ISystemUserEmailDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemUserEmailDo) Preload(fields ...field.RelationField) ISystemUserEmailDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemUserEmailDo) FirstOrInit() (*model.SystemUserEmail, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserEmail), nil
	}
}

func (s systemUserEmailDo) FirstOrCreate() (*model.SystemUserEmail, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserEmail), nil
	}
}

func (s systemUserEmailDo) FindByPage(offset int, limit int) (result []*model.SystemUserEmail, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemUserEmailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemUserEmailDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemUserEmailDo) Delete(models ...*model.SystemUserEmail) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemUserEmailDo) withDO(do gen.Dao) *systemUserEmailDo {
	s.DO = *do.(*gen.DO)
	return s
}
