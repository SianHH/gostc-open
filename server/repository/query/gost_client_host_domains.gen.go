// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/model"
)

func newGostClientHostDomain(db *gorm.DB, opts ...gen.DOOption) gostClientHostDomain {
	_gostClientHostDomain := gostClientHostDomain{}

	_gostClientHostDomain.gostClientHostDomainDo.UseDB(db, opts...)
	_gostClientHostDomain.gostClientHostDomainDo.UseModel(&model.GostClientHostDomain{})

	tableName := _gostClientHostDomain.gostClientHostDomainDo.TableName()
	_gostClientHostDomain.ALL = field.NewAsterisk(tableName)
	_gostClientHostDomain.Id = field.NewInt(tableName, "id")
	_gostClientHostDomain.Code = field.NewString(tableName, "code")
	_gostClientHostDomain.AllowEdit = field.NewInt(tableName, "allow_edit")
	_gostClientHostDomain.AllowDel = field.NewInt(tableName, "allow_del")
	_gostClientHostDomain.Version = field.NewInt64(tableName, "version")
	_gostClientHostDomain.CreatedAt = field.NewTime(tableName, "created_at")
	_gostClientHostDomain.UpdatedAt = field.NewTime(tableName, "updated_at")
	_gostClientHostDomain.Domain = field.NewString(tableName, "domain")

	_gostClientHostDomain.fillFieldMap()

	return _gostClientHostDomain
}

type gostClientHostDomain struct {
	gostClientHostDomainDo

	ALL       field.Asterisk
	Id        field.Int
	Code      field.String
	AllowEdit field.Int
	AllowDel  field.Int
	Version   field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	Domain    field.String

	fieldMap map[string]field.Expr
}

func (g gostClientHostDomain) Table(newTableName string) *gostClientHostDomain {
	g.gostClientHostDomainDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gostClientHostDomain) As(alias string) *gostClientHostDomain {
	g.gostClientHostDomainDo.DO = *(g.gostClientHostDomainDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gostClientHostDomain) updateTableName(table string) *gostClientHostDomain {
	g.ALL = field.NewAsterisk(table)
	g.Id = field.NewInt(table, "id")
	g.Code = field.NewString(table, "code")
	g.AllowEdit = field.NewInt(table, "allow_edit")
	g.AllowDel = field.NewInt(table, "allow_del")
	g.Version = field.NewInt64(table, "version")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.Domain = field.NewString(table, "domain")

	g.fillFieldMap()

	return g
}

func (g *gostClientHostDomain) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gostClientHostDomain) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 8)
	g.fieldMap["id"] = g.Id
	g.fieldMap["code"] = g.Code
	g.fieldMap["allow_edit"] = g.AllowEdit
	g.fieldMap["allow_del"] = g.AllowDel
	g.fieldMap["version"] = g.Version
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["domain"] = g.Domain
}

func (g gostClientHostDomain) clone(db *gorm.DB) gostClientHostDomain {
	g.gostClientHostDomainDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gostClientHostDomain) replaceDB(db *gorm.DB) gostClientHostDomain {
	g.gostClientHostDomainDo.ReplaceDB(db)
	return g
}

type gostClientHostDomainDo struct{ gen.DO }

type IGostClientHostDomainDo interface {
	gen.SubQuery
	Debug() IGostClientHostDomainDo
	WithContext(ctx context.Context) IGostClientHostDomainDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGostClientHostDomainDo
	WriteDB() IGostClientHostDomainDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGostClientHostDomainDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGostClientHostDomainDo
	Not(conds ...gen.Condition) IGostClientHostDomainDo
	Or(conds ...gen.Condition) IGostClientHostDomainDo
	Select(conds ...field.Expr) IGostClientHostDomainDo
	Where(conds ...gen.Condition) IGostClientHostDomainDo
	Order(conds ...field.Expr) IGostClientHostDomainDo
	Distinct(cols ...field.Expr) IGostClientHostDomainDo
	Omit(cols ...field.Expr) IGostClientHostDomainDo
	Join(table schema.Tabler, on ...field.Expr) IGostClientHostDomainDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGostClientHostDomainDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGostClientHostDomainDo
	Group(cols ...field.Expr) IGostClientHostDomainDo
	Having(conds ...gen.Condition) IGostClientHostDomainDo
	Limit(limit int) IGostClientHostDomainDo
	Offset(offset int) IGostClientHostDomainDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGostClientHostDomainDo
	Unscoped() IGostClientHostDomainDo
	Create(values ...*model.GostClientHostDomain) error
	CreateInBatches(values []*model.GostClientHostDomain, batchSize int) error
	Save(values ...*model.GostClientHostDomain) error
	First() (*model.GostClientHostDomain, error)
	Take() (*model.GostClientHostDomain, error)
	Last() (*model.GostClientHostDomain, error)
	Find() ([]*model.GostClientHostDomain, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostClientHostDomain, err error)
	FindInBatches(result *[]*model.GostClientHostDomain, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GostClientHostDomain) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGostClientHostDomainDo
	Assign(attrs ...field.AssignExpr) IGostClientHostDomainDo
	Joins(fields ...field.RelationField) IGostClientHostDomainDo
	Preload(fields ...field.RelationField) IGostClientHostDomainDo
	FirstOrInit() (*model.GostClientHostDomain, error)
	FirstOrCreate() (*model.GostClientHostDomain, error)
	FindByPage(offset int, limit int) (result []*model.GostClientHostDomain, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGostClientHostDomainDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gostClientHostDomainDo) Debug() IGostClientHostDomainDo {
	return g.withDO(g.DO.Debug())
}

func (g gostClientHostDomainDo) WithContext(ctx context.Context) IGostClientHostDomainDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gostClientHostDomainDo) ReadDB() IGostClientHostDomainDo {
	return g.Clauses(dbresolver.Read)
}

func (g gostClientHostDomainDo) WriteDB() IGostClientHostDomainDo {
	return g.Clauses(dbresolver.Write)
}

func (g gostClientHostDomainDo) Session(config *gorm.Session) IGostClientHostDomainDo {
	return g.withDO(g.DO.Session(config))
}

func (g gostClientHostDomainDo) Clauses(conds ...clause.Expression) IGostClientHostDomainDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gostClientHostDomainDo) Returning(value interface{}, columns ...string) IGostClientHostDomainDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gostClientHostDomainDo) Not(conds ...gen.Condition) IGostClientHostDomainDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gostClientHostDomainDo) Or(conds ...gen.Condition) IGostClientHostDomainDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gostClientHostDomainDo) Select(conds ...field.Expr) IGostClientHostDomainDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gostClientHostDomainDo) Where(conds ...gen.Condition) IGostClientHostDomainDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gostClientHostDomainDo) Order(conds ...field.Expr) IGostClientHostDomainDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gostClientHostDomainDo) Distinct(cols ...field.Expr) IGostClientHostDomainDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gostClientHostDomainDo) Omit(cols ...field.Expr) IGostClientHostDomainDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gostClientHostDomainDo) Join(table schema.Tabler, on ...field.Expr) IGostClientHostDomainDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gostClientHostDomainDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGostClientHostDomainDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gostClientHostDomainDo) RightJoin(table schema.Tabler, on ...field.Expr) IGostClientHostDomainDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gostClientHostDomainDo) Group(cols ...field.Expr) IGostClientHostDomainDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gostClientHostDomainDo) Having(conds ...gen.Condition) IGostClientHostDomainDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gostClientHostDomainDo) Limit(limit int) IGostClientHostDomainDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gostClientHostDomainDo) Offset(offset int) IGostClientHostDomainDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gostClientHostDomainDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGostClientHostDomainDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gostClientHostDomainDo) Unscoped() IGostClientHostDomainDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gostClientHostDomainDo) Create(values ...*model.GostClientHostDomain) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gostClientHostDomainDo) CreateInBatches(values []*model.GostClientHostDomain, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gostClientHostDomainDo) Save(values ...*model.GostClientHostDomain) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gostClientHostDomainDo) First() (*model.GostClientHostDomain, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientHostDomain), nil
	}
}

func (g gostClientHostDomainDo) Take() (*model.GostClientHostDomain, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientHostDomain), nil
	}
}

func (g gostClientHostDomainDo) Last() (*model.GostClientHostDomain, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientHostDomain), nil
	}
}

func (g gostClientHostDomainDo) Find() ([]*model.GostClientHostDomain, error) {
	result, err := g.DO.Find()
	return result.([]*model.GostClientHostDomain), err
}

func (g gostClientHostDomainDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostClientHostDomain, err error) {
	buf := make([]*model.GostClientHostDomain, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gostClientHostDomainDo) FindInBatches(result *[]*model.GostClientHostDomain, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gostClientHostDomainDo) Attrs(attrs ...field.AssignExpr) IGostClientHostDomainDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gostClientHostDomainDo) Assign(attrs ...field.AssignExpr) IGostClientHostDomainDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gostClientHostDomainDo) Joins(fields ...field.RelationField) IGostClientHostDomainDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gostClientHostDomainDo) Preload(fields ...field.RelationField) IGostClientHostDomainDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gostClientHostDomainDo) FirstOrInit() (*model.GostClientHostDomain, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientHostDomain), nil
	}
}

func (g gostClientHostDomainDo) FirstOrCreate() (*model.GostClientHostDomain, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostClientHostDomain), nil
	}
}

func (g gostClientHostDomainDo) FindByPage(offset int, limit int) (result []*model.GostClientHostDomain, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gostClientHostDomainDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gostClientHostDomainDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gostClientHostDomainDo) Delete(models ...*model.GostClientHostDomain) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gostClientHostDomainDo) withDO(do gen.Dao) *gostClientHostDomainDo {
	g.DO = *do.(*gen.DO)
	return g
}
