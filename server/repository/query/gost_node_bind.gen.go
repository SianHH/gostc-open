// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/model"
)

func newGostNodeBind(db *gorm.DB, opts ...gen.DOOption) gostNodeBind {
	_gostNodeBind := gostNodeBind{}

	_gostNodeBind.gostNodeBindDo.UseDB(db, opts...)
	_gostNodeBind.gostNodeBindDo.UseModel(&model.GostNodeBind{})

	tableName := _gostNodeBind.gostNodeBindDo.TableName()
	_gostNodeBind.ALL = field.NewAsterisk(tableName)
	_gostNodeBind.Id = field.NewInt(tableName, "id")
	_gostNodeBind.Code = field.NewString(tableName, "code")
	_gostNodeBind.AllowEdit = field.NewInt(tableName, "allow_edit")
	_gostNodeBind.AllowDel = field.NewInt(tableName, "allow_del")
	_gostNodeBind.Version = field.NewInt64(tableName, "version")
	_gostNodeBind.CreatedAt = field.NewTime(tableName, "created_at")
	_gostNodeBind.UpdatedAt = field.NewTime(tableName, "updated_at")
	_gostNodeBind.NodeCode = field.NewString(tableName, "node_code")
	_gostNodeBind.UserCode = field.NewString(tableName, "user_code")
	_gostNodeBind.Node = gostNodeBindBelongsToNode{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Node", "model.GostNode"),
		Configs: struct {
			field.RelationField
			Node struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Node.Configs", "model.GostNodeConfig"),
			Node: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Node.Configs.Node", "model.GostNode"),
			},
		},
	}

	_gostNodeBind.User = gostNodeBindBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.SystemUser"),
	}

	_gostNodeBind.fillFieldMap()

	return _gostNodeBind
}

type gostNodeBind struct {
	gostNodeBindDo

	ALL       field.Asterisk
	Id        field.Int
	Code      field.String
	AllowEdit field.Int
	AllowDel  field.Int
	Version   field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	NodeCode  field.String
	UserCode  field.String
	Node      gostNodeBindBelongsToNode

	User gostNodeBindBelongsToUser

	fieldMap map[string]field.Expr
}

func (g gostNodeBind) Table(newTableName string) *gostNodeBind {
	g.gostNodeBindDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gostNodeBind) As(alias string) *gostNodeBind {
	g.gostNodeBindDo.DO = *(g.gostNodeBindDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gostNodeBind) updateTableName(table string) *gostNodeBind {
	g.ALL = field.NewAsterisk(table)
	g.Id = field.NewInt(table, "id")
	g.Code = field.NewString(table, "code")
	g.AllowEdit = field.NewInt(table, "allow_edit")
	g.AllowDel = field.NewInt(table, "allow_del")
	g.Version = field.NewInt64(table, "version")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.NodeCode = field.NewString(table, "node_code")
	g.UserCode = field.NewString(table, "user_code")

	g.fillFieldMap()

	return g
}

func (g *gostNodeBind) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gostNodeBind) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 11)
	g.fieldMap["id"] = g.Id
	g.fieldMap["code"] = g.Code
	g.fieldMap["allow_edit"] = g.AllowEdit
	g.fieldMap["allow_del"] = g.AllowDel
	g.fieldMap["version"] = g.Version
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["node_code"] = g.NodeCode
	g.fieldMap["user_code"] = g.UserCode

}

func (g gostNodeBind) clone(db *gorm.DB) gostNodeBind {
	g.gostNodeBindDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gostNodeBind) replaceDB(db *gorm.DB) gostNodeBind {
	g.gostNodeBindDo.ReplaceDB(db)
	return g
}

type gostNodeBindBelongsToNode struct {
	db *gorm.DB

	field.RelationField

	Configs struct {
		field.RelationField
		Node struct {
			field.RelationField
		}
	}
}

func (a gostNodeBindBelongsToNode) Where(conds ...field.Expr) *gostNodeBindBelongsToNode {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a gostNodeBindBelongsToNode) WithContext(ctx context.Context) *gostNodeBindBelongsToNode {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a gostNodeBindBelongsToNode) Session(session *gorm.Session) *gostNodeBindBelongsToNode {
	a.db = a.db.Session(session)
	return &a
}

func (a gostNodeBindBelongsToNode) Model(m *model.GostNodeBind) *gostNodeBindBelongsToNodeTx {
	return &gostNodeBindBelongsToNodeTx{a.db.Model(m).Association(a.Name())}
}

type gostNodeBindBelongsToNodeTx struct{ tx *gorm.Association }

func (a gostNodeBindBelongsToNodeTx) Find() (result *model.GostNode, err error) {
	return result, a.tx.Find(&result)
}

func (a gostNodeBindBelongsToNodeTx) Append(values ...*model.GostNode) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a gostNodeBindBelongsToNodeTx) Replace(values ...*model.GostNode) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a gostNodeBindBelongsToNodeTx) Delete(values ...*model.GostNode) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a gostNodeBindBelongsToNodeTx) Clear() error {
	return a.tx.Clear()
}

func (a gostNodeBindBelongsToNodeTx) Count() int64 {
	return a.tx.Count()
}

type gostNodeBindBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a gostNodeBindBelongsToUser) Where(conds ...field.Expr) *gostNodeBindBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a gostNodeBindBelongsToUser) WithContext(ctx context.Context) *gostNodeBindBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a gostNodeBindBelongsToUser) Session(session *gorm.Session) *gostNodeBindBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a gostNodeBindBelongsToUser) Model(m *model.GostNodeBind) *gostNodeBindBelongsToUserTx {
	return &gostNodeBindBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type gostNodeBindBelongsToUserTx struct{ tx *gorm.Association }

func (a gostNodeBindBelongsToUserTx) Find() (result *model.SystemUser, err error) {
	return result, a.tx.Find(&result)
}

func (a gostNodeBindBelongsToUserTx) Append(values ...*model.SystemUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a gostNodeBindBelongsToUserTx) Replace(values ...*model.SystemUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a gostNodeBindBelongsToUserTx) Delete(values ...*model.SystemUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a gostNodeBindBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a gostNodeBindBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type gostNodeBindDo struct{ gen.DO }

type IGostNodeBindDo interface {
	gen.SubQuery
	Debug() IGostNodeBindDo
	WithContext(ctx context.Context) IGostNodeBindDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGostNodeBindDo
	WriteDB() IGostNodeBindDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGostNodeBindDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGostNodeBindDo
	Not(conds ...gen.Condition) IGostNodeBindDo
	Or(conds ...gen.Condition) IGostNodeBindDo
	Select(conds ...field.Expr) IGostNodeBindDo
	Where(conds ...gen.Condition) IGostNodeBindDo
	Order(conds ...field.Expr) IGostNodeBindDo
	Distinct(cols ...field.Expr) IGostNodeBindDo
	Omit(cols ...field.Expr) IGostNodeBindDo
	Join(table schema.Tabler, on ...field.Expr) IGostNodeBindDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGostNodeBindDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGostNodeBindDo
	Group(cols ...field.Expr) IGostNodeBindDo
	Having(conds ...gen.Condition) IGostNodeBindDo
	Limit(limit int) IGostNodeBindDo
	Offset(offset int) IGostNodeBindDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGostNodeBindDo
	Unscoped() IGostNodeBindDo
	Create(values ...*model.GostNodeBind) error
	CreateInBatches(values []*model.GostNodeBind, batchSize int) error
	Save(values ...*model.GostNodeBind) error
	First() (*model.GostNodeBind, error)
	Take() (*model.GostNodeBind, error)
	Last() (*model.GostNodeBind, error)
	Find() ([]*model.GostNodeBind, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostNodeBind, err error)
	FindInBatches(result *[]*model.GostNodeBind, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GostNodeBind) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGostNodeBindDo
	Assign(attrs ...field.AssignExpr) IGostNodeBindDo
	Joins(fields ...field.RelationField) IGostNodeBindDo
	Preload(fields ...field.RelationField) IGostNodeBindDo
	FirstOrInit() (*model.GostNodeBind, error)
	FirstOrCreate() (*model.GostNodeBind, error)
	FindByPage(offset int, limit int) (result []*model.GostNodeBind, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGostNodeBindDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gostNodeBindDo) Debug() IGostNodeBindDo {
	return g.withDO(g.DO.Debug())
}

func (g gostNodeBindDo) WithContext(ctx context.Context) IGostNodeBindDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gostNodeBindDo) ReadDB() IGostNodeBindDo {
	return g.Clauses(dbresolver.Read)
}

func (g gostNodeBindDo) WriteDB() IGostNodeBindDo {
	return g.Clauses(dbresolver.Write)
}

func (g gostNodeBindDo) Session(config *gorm.Session) IGostNodeBindDo {
	return g.withDO(g.DO.Session(config))
}

func (g gostNodeBindDo) Clauses(conds ...clause.Expression) IGostNodeBindDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gostNodeBindDo) Returning(value interface{}, columns ...string) IGostNodeBindDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gostNodeBindDo) Not(conds ...gen.Condition) IGostNodeBindDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gostNodeBindDo) Or(conds ...gen.Condition) IGostNodeBindDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gostNodeBindDo) Select(conds ...field.Expr) IGostNodeBindDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gostNodeBindDo) Where(conds ...gen.Condition) IGostNodeBindDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gostNodeBindDo) Order(conds ...field.Expr) IGostNodeBindDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gostNodeBindDo) Distinct(cols ...field.Expr) IGostNodeBindDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gostNodeBindDo) Omit(cols ...field.Expr) IGostNodeBindDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gostNodeBindDo) Join(table schema.Tabler, on ...field.Expr) IGostNodeBindDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gostNodeBindDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGostNodeBindDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gostNodeBindDo) RightJoin(table schema.Tabler, on ...field.Expr) IGostNodeBindDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gostNodeBindDo) Group(cols ...field.Expr) IGostNodeBindDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gostNodeBindDo) Having(conds ...gen.Condition) IGostNodeBindDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gostNodeBindDo) Limit(limit int) IGostNodeBindDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gostNodeBindDo) Offset(offset int) IGostNodeBindDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gostNodeBindDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGostNodeBindDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gostNodeBindDo) Unscoped() IGostNodeBindDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gostNodeBindDo) Create(values ...*model.GostNodeBind) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gostNodeBindDo) CreateInBatches(values []*model.GostNodeBind, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gostNodeBindDo) Save(values ...*model.GostNodeBind) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gostNodeBindDo) First() (*model.GostNodeBind, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodeBind), nil
	}
}

func (g gostNodeBindDo) Take() (*model.GostNodeBind, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodeBind), nil
	}
}

func (g gostNodeBindDo) Last() (*model.GostNodeBind, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodeBind), nil
	}
}

func (g gostNodeBindDo) Find() ([]*model.GostNodeBind, error) {
	result, err := g.DO.Find()
	return result.([]*model.GostNodeBind), err
}

func (g gostNodeBindDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GostNodeBind, err error) {
	buf := make([]*model.GostNodeBind, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gostNodeBindDo) FindInBatches(result *[]*model.GostNodeBind, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gostNodeBindDo) Attrs(attrs ...field.AssignExpr) IGostNodeBindDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gostNodeBindDo) Assign(attrs ...field.AssignExpr) IGostNodeBindDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gostNodeBindDo) Joins(fields ...field.RelationField) IGostNodeBindDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gostNodeBindDo) Preload(fields ...field.RelationField) IGostNodeBindDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gostNodeBindDo) FirstOrInit() (*model.GostNodeBind, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodeBind), nil
	}
}

func (g gostNodeBindDo) FirstOrCreate() (*model.GostNodeBind, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GostNodeBind), nil
	}
}

func (g gostNodeBindDo) FindByPage(offset int, limit int) (result []*model.GostNodeBind, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gostNodeBindDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gostNodeBindDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gostNodeBindDo) Delete(models ...*model.GostNodeBind) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gostNodeBindDo) withDO(do gen.Dao) *gostNodeBindDo {
	g.DO = *do.(*gen.DO)
	return g
}
